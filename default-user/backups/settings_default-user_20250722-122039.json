{
    "firstRun": false,
    "accountStorage": {
        "__migrated": "1",
        "NavOpened": "false",
        "LNavOpened": "true"
    },
    "currentVersion": "1.13.1",
    "username": "影子",
    "api_server": "http://127.0.0.1:5000/api",
    "preset_settings": "RecoveredRuins",
    "user_avatar": "user-default.png",
    "amount_gen": 350,
    "max_context": 8192,
    "main_api": "koboldhorde",
    "world_info_settings": {
        "world_info": {
            "globalSelect": []
        },
        "world_info_depth": 2,
        "world_info_min_activations": 0,
        "world_info_min_activations_depth_max": 0,
        "world_info_budget": 25,
        "world_info_include_names": true,
        "world_info_recursive": true,
        "world_info_overflow_alert": false,
        "world_info_case_sensitive": false,
        "world_info_match_whole_words": true,
        "world_info_character_strategy": 1,
        "world_info_budget_cap": 0,
        "world_info_use_group_scoring": false,
        "world_info_max_recursion_steps": 0
    },
    "textgenerationwebui_settings": {
        "temp": 0.5,
        "temperature_last": true,
        "top_p": 0.9,
        "top_k": 0,
        "top_a": 0,
        "tfs": 1,
        "epsilon_cutoff": 0,
        "eta_cutoff": 0,
        "typical_p": 1,
        "min_p": 0,
        "rep_pen": 1.1,
        "rep_pen_range": 0,
        "rep_pen_decay": 0,
        "rep_pen_slope": 1,
        "no_repeat_ngram_size": 0,
        "penalty_alpha": 0,
        "num_beams": 1,
        "length_penalty": 1,
        "min_length": 0,
        "encoder_rep_pen": 1,
        "freq_pen": 0,
        "presence_pen": 0,
        "skew": 0,
        "do_sample": true,
        "early_stopping": false,
        "dynatemp": false,
        "min_temp": 0,
        "max_temp": 2,
        "dynatemp_exponent": 1,
        "smoothing_factor": 0,
        "smoothing_curve": 1,
        "dry_allowed_length": 2,
        "dry_multiplier": 0,
        "dry_base": 1.75,
        "dry_sequence_breakers": "[\"\\n\", \":\", \"\\\"\", \"*\"]",
        "dry_penalty_last_n": 0,
        "max_tokens_second": 0,
        "seed": -1,
        "preset": "Default",
        "add_bos_token": true,
        "stopping_strings": [],
        "ban_eos_token": false,
        "skip_special_tokens": true,
        "include_reasoning": true,
        "streaming": false,
        "mirostat_mode": 0,
        "mirostat_tau": 5,
        "mirostat_eta": 0.1,
        "guidance_scale": 1,
        "negative_prompt": "",
        "grammar_string": "",
        "json_schema": {},
        "banned_tokens": "",
        "global_banned_tokens": "",
        "send_banned_tokens": true,
        "sampler_priority": [
            "repetition_penalty",
            "presence_penalty",
            "frequency_penalty",
            "dry",
            "temperature",
            "dynamic_temperature",
            "quadratic_sampling",
            "top_k",
            "top_p",
            "typical_p",
            "epsilon_cutoff",
            "eta_cutoff",
            "tfs",
            "top_a",
            "min_p",
            "mirostat",
            "xtc",
            "encoder_repetition_penalty",
            "no_repeat_ngram"
        ],
        "samplers": [
            "penalties",
            "dry",
            "top_n_sigma",
            "top_k",
            "typ_p",
            "tfs_z",
            "typical_p",
            "xtc",
            "top_p",
            "min_p",
            "temperature"
        ],
        "samplers_priorities": [
            "dry",
            "penalties",
            "no_repeat_ngram",
            "temperature",
            "top_nsigma",
            "top_p_top_k",
            "top_a",
            "min_p",
            "tfs",
            "eta_cutoff",
            "epsilon_cutoff",
            "typical_p",
            "quadratic",
            "xtc"
        ],
        "ignore_eos_token": false,
        "spaces_between_special_tokens": true,
        "speculative_ngram": false,
        "type": "ooba",
        "mancer_model": "mytholite",
        "togetherai_model": "Gryphe/MythoMax-L2-13b",
        "infermaticai_model": "",
        "ollama_model": "",
        "openrouter_model": "openrouter/auto",
        "openrouter_providers": [],
        "vllm_model": "",
        "aphrodite_model": "",
        "dreamgen_model": "opus-v1-xl/text",
        "tabby_model": "",
        "sampler_order": [
            6,
            0,
            1,
            3,
            4,
            2,
            5
        ],
        "logit_bias": [],
        "n": 1,
        "server_urls": {},
        "custom_model": "",
        "bypass_status_check": false,
        "openrouter_allow_fallbacks": true,
        "xtc_threshold": 0.1,
        "xtc_probability": 0,
        "nsigma": 0,
        "min_keep": 0,
        "featherless_model": "",
        "generic_model": "",
        "rep_pen_size": 0
    },
    "swipes": true,
    "horde_settings": {
        "models": [],
        "auto_adjust_response_length": true,
        "auto_adjust_context_length": false,
        "trusted_workers_only": false
    },
    "power_user": {
        "charListGrid": false,
        "tokenizer": 99,
        "token_padding": 64,
        "collapse_newlines": false,
        "pin_examples": false,
        "strip_examples": false,
        "trim_sentences": false,
        "always_force_name2": true,
        "user_prompt_bias": "",
        "show_user_prompt_bias": true,
        "auto_continue": {
            "enabled": false,
            "allow_chat_completions": false,
            "target_length": 400
        },
        "markdown_escape_strings": "",
        "chat_truncation": 100,
        "streaming_fps": 30,
        "smooth_streaming": false,
        "smooth_streaming_speed": 50,
        "fast_ui_mode": true,
        "avatar_style": 0,
        "chat_display": 0,
        "toastr_position": "toast-top-center",
        "chat_width": 50,
        "never_resize_avatars": false,
        "show_card_avatar_urls": false,
        "play_message_sound": false,
        "play_sound_unfocused": true,
        "auto_save_msg_edits": false,
        "confirm_message_delete": true,
        "sort_field": "name",
        "sort_order": "asc",
        "sort_rule": null,
        "font_scale": 1,
        "blur_strength": 10,
        "shadow_width": 2,
        "main_text_color": "rgba(220, 220, 210, 1)",
        "italics_text_color": "rgba(145, 145, 145, 1)",
        "underline_text_color": "rgba(188, 231, 207, 1)",
        "quote_text_color": "rgba(225, 138, 36, 1)",
        "blur_tint_color": "rgba(23, 23, 23, 1)",
        "chat_tint_color": "rgba(23, 23, 23, 1)",
        "user_mes_blur_tint_color": "rgba(30, 30, 30, 0.9)",
        "bot_mes_blur_tint_color": "rgba(30, 30, 30, 0.9)",
        "shadow_color": "rgba(0, 0, 0, 1)",
        "border_color": "rgba(0, 0, 0, 0.5)",
        "custom_css": "",
        "waifuMode": false,
        "movingUI": false,
        "movingUIState": {},
        "movingUIPreset": "Default",
        "noShadows": true,
        "theme": "Dark Lite",
        "gestures": true,
        "auto_swipe": false,
        "auto_swipe_minimum_length": 0,
        "auto_swipe_blacklist": [],
        "auto_swipe_blacklist_threshold": 2,
        "auto_scroll_chat_to_bottom": true,
        "auto_fix_generated_markdown": false,
        "send_on_enter": 0,
        "console_log_prompts": false,
        "request_token_probabilities": false,
        "show_group_chat_queue": false,
        "allow_name1_display": false,
        "allow_name2_display": false,
        "hotswap_enabled": true,
        "timer_enabled": false,
        "timestamps_enabled": true,
        "timestamp_model_icon": true,
        "mesIDDisplay_enabled": false,
        "hideChatAvatars_enabled": false,
        "max_context_unlocked": false,
        "message_token_count_enabled": false,
        "expand_message_actions": false,
        "enableZenSliders": false,
        "enableLabMode": false,
        "prefer_character_prompt": true,
        "prefer_character_jailbreak": true,
        "quick_continue": false,
        "quick_impersonate": false,
        "continue_on_send": false,
        "trim_spaces": true,
        "relaxed_api_urls": false,
        "world_import_dialog": true,
        "enable_auto_select_input": false,
        "enable_md_hotkeys": false,
        "tag_import_setting": 1,
        "disable_group_trimming": false,
        "single_line": false,
        "instruct": {
            "enabled": false,
            "preset": "Alpaca",
            "input_sequence": "### Instruction:",
            "output_sequence": "### Response:",
            "last_output_sequence": "",
            "system_sequence": "### Input:",
            "stop_sequence": "",
            "wrap": true,
            "macro": true,
            "names_behavior": "force",
            "activation_regex": "",
            "system_sequence_prefix": "",
            "system_sequence_suffix": "",
            "first_output_sequence": "",
            "skip_examples": false,
            "output_suffix": "\n\n",
            "input_suffix": "\n\n",
            "system_suffix": "\n\n",
            "user_alignment_message": "",
            "system_same_as_user": false,
            "last_system_sequence": "",
            "first_input_sequence": "",
            "last_input_sequence": "",
            "names_force_groups": true
        },
        "context": {
            "preset": "Default",
            "story_string": "{{#if system}}{{system}}\n{{/if}}{{#if wiBefore}}{{wiBefore}}\n{{/if}}{{#if description}}{{description}}\n{{/if}}{{#if personality}}{{char}}'s personality: {{personality}}\n{{/if}}{{#if scenario}}Scenario: {{scenario}}\n{{/if}}{{#if wiAfter}}{{wiAfter}}\n{{/if}}{{#if persona}}{{persona}}\n{{/if}}",
            "chat_start": "***",
            "example_separator": "***",
            "use_stop_strings": true,
            "names_as_stop_strings": true
        },
        "context_derived": false,
        "context_size_derived": false,
        "sysprompt": {
            "enabled": true,
            "name": "Neutral - Chat",
            "content": "Write {{char}}'s next reply in a fictional chat between {{char}} and {{user}}."
        },
        "reasoning": {
            "name": "DeepSeek",
            "auto_parse": false,
            "add_to_prompts": false,
            "auto_expand": false,
            "show_hidden": false,
            "prefix": "<think>\n",
            "suffix": "\n</think>",
            "separator": "\n\n",
            "max_additions": 1
        },
        "personas": {
            "user-default.png": "影子"
        },
        "default_persona": null,
        "persona_descriptions": {
            "user-default.png": {
                "description": "",
                "position": 0
            }
        },
        "persona_description": "",
        "persona_description_position": 0,
        "persona_description_role": 0,
        "persona_description_depth": 2,
        "persona_description_lorebook": "",
        "persona_show_notifications": true,
        "persona_sort_order": "asc",
        "custom_stopping_strings": "",
        "custom_stopping_strings_macro": true,
        "fuzzy_search": true,
        "encode_tags": false,
        "servers": [],
        "bogus_folders": false,
        "zoomed_avatar_magnification": false,
        "show_tag_filters": false,
        "aux_field": "character_version",
        "stscript": {
            "parser": {
                "flags": {
                    "1": true,
                    "2": true
                }
            },
            "autocomplete": {
                "state": 2,
                "autoHide": false,
                "style": "theme",
                "font": {
                    "scale": 0.8
                },
                "width": {
                    "left": 1,
                    "right": 1
                },
                "select": 3
            }
        },
        "restore_user_input": true,
        "reduced_motion": false,
        "compact_input_area": true,
        "show_swipe_num_all_messages": false,
        "auto_connect": false,
        "auto_load_chat": false,
        "forbid_external_media": true,
        "external_media_allowed_overrides": [],
        "external_media_forbidden_overrides": [],
        "pin_styles": true,
        "click_to_edit": false,
        "ui_mode": 1,
        "auto_sort_tags": false,
        "selectSamplers": {
            "forceHidden": [],
            "forceShown": []
        }
    },
    "extension_settings": {
        "apiUrl": "http://localhost:5100",
        "apiKey": "",
        "autoConnect": false,
        "notifyUpdates": false,
        "disabledExtensions": [],
        "expressionOverrides": [],
        "memory": {
            "minLongMemory": 16,
            "maxLongMemory": 1024,
            "longMemoryLength": 128,
            "shortMemoryLength": 512,
            "minShortMemory": 128,
            "maxShortMemory": 1024,
            "shortMemoryStep": 16,
            "longMemoryStep": 8,
            "repetitionPenaltyStep": 0.05,
            "repetitionPenalty": 1.2,
            "maxRepetitionPenalty": 2,
            "minRepetitionPenalty": 1,
            "temperature": 1,
            "minTemperature": 0.1,
            "maxTemperature": 2,
            "temperatureStep": 0.05,
            "lengthPenalty": 1,
            "minLengthPenalty": -4,
            "maxLengthPenalty": 4,
            "lengthPenaltyStep": 0.1,
            "memoryFrozen": false,
            "source": "extras",
            "prompt": "Ignore previous instructions. Summarize the most important facts and events in the story so far. If a summary already exists in your memory, use that as a base and expand with new facts. Limit the summary to {{words}} words or less. Your response should include nothing but the summary.",
            "promptWords": 200,
            "promptMinWords": 25,
            "promptMaxWords": 1000,
            "promptWordsStep": 25,
            "promptInterval": 10,
            "promptMinInterval": 1,
            "promptMaxInterval": 100,
            "promptIntervalStep": 1,
            "template": "[Summary: {{summary}}]",
            "position": 0,
            "depth": 2,
            "promptForceWords": 0,
            "promptForceWordsStep": 100,
            "promptMinForceWords": 0,
            "promptMaxForceWords": 10000,
            "SkipWIAN": false,
            "role": 0,
            "scan": false,
            "overrideResponseLength": 0,
            "overrideResponseLengthMin": 0,
            "overrideResponseLengthMax": 4096,
            "overrideResponseLengthStep": 16,
            "maxMessagesPerRequest": 0,
            "maxMessagesPerRequestMin": 0,
            "maxMessagesPerRequestMax": 250,
            "maxMessagesPerRequestStep": 1,
            "prompt_builder": 0
        },
        "note": {
            "default": "",
            "chara": [],
            "wiAddition": [],
            "defaultPosition": 1,
            "defaultDepth": 4,
            "defaultInterval": 1,
            "defaultRole": 0
        },
        "caption": {
            "refine_mode": false,
            "source": "extras",
            "multimodal_api": "openai",
            "multimodal_model": "gpt-4-turbo",
            "prompt": "What's in this image?",
            "template": "[{{user}} sends {{char}} a picture that contains: {{caption}}]"
        },
        "expressions": {
            "showDefault": false,
            "api": 99,
            "llmPrompt": "Ignore previous instructions. Classify the emotion of the last message. Output just one word, e.g. \"joy\" or \"anger\". Choose only one of the following labels: {{labels}}",
            "allowMultiple": true,
            "promptType": "raw",
            "custom": []
        },
        "connectionManager": {
            "selectedProfile": "",
            "profiles": []
        },
        "dice": {},
        "regex": [
            {
                "id": "73fa84f2-051a-4fcd-a8a0-8ae5658b3dba",
                "scriptName": "【Dreammini】1.5(搶話)去除所有用户消息",
                "disabled": true,
                "runOnEdit": true,
                "findRegex": "^([\\s\\S]*)$",
                "replaceString": "",
                "trimStrings": [],
                "placement": [
                    1
                ],
                "substituteRegex": 0,
                "minDepth": 1,
                "maxDepth": null,
                "markdownOnly": false,
                "promptOnly": true
            },
            {
                "id": "6d9fbba5-cad1-433b-b029-2bede24458d3",
                "scriptName": "【Dreammini】1.添加输入tag",
                "disabled": false,
                "runOnEdit": true,
                "findRegex": "^([\\s\\S]*)$",
                "replaceString": "<user_input>\n$1\n</user_input>",
                "trimStrings": [],
                "placement": [
                    1
                ],
                "substituteRegex": 0,
                "minDepth": null,
                "maxDepth": 1,
                "markdownOnly": false,
                "promptOnly": true
            },
            {
                "id": "a6cdf897-f72e-4f89-bfd7-6ca26d761109",
                "scriptName": "【Dreammini】2.去多餘",
                "disabled": false,
                "runOnEdit": true,
                "findRegex": "/([\\s\\S]*?</think>)|(<true>[\\s\\S]*?</true>)|<think>|</think>|(<!--\\s*run([\\s\\S]*?)-->)|(<prethink>[\\s\\S]*?</prethink>)/gsi",
                "replaceString": "",
                "trimStrings": [],
                "placement": [
                    2
                ],
                "substituteRegex": 0,
                "minDepth": null,
                "maxDepth": null,
                "markdownOnly": true,
                "promptOnly": true
            },
            {
                "id": "18567ca7-b0c6-463a-b02b-183566b4ffd2",
                "scriptName": "【Dreammini】3.[推进(缩起)]",
                "disabled": false,
                "runOnEdit": true,
                "findRegex": "/<plot>([\\s\\S]*?)</plot>/gsi",
                "replaceString": "<details>\n<summary>推进</summary>\n$1\n</details>\n \n",
                "trimStrings": [],
                "placement": [
                    2
                ],
                "substituteRegex": 0,
                "minDepth": null,
                "maxDepth": 30,
                "markdownOnly": true,
                "promptOnly": false
            },
            {
                "id": "5bb6e147-14f0-4527-9b45-6ea958df26d3",
                "scriptName": "【Dreammini】3.[推进(移除)]",
                "disabled": true,
                "runOnEdit": true,
                "findRegex": "/<plot>([\\s\\S]*?)</plot>/gsi",
                "replaceString": "",
                "trimStrings": [],
                "placement": [
                    2
                ],
                "substituteRegex": 0,
                "minDepth": null,
                "maxDepth": 30,
                "markdownOnly": true,
                "promptOnly": false
            },
            {
                "id": "21ed7ae3-8926-483e-ac46-3bd55a1d6530",
                "scriptName": "【Dreammini】4.[推进(移除舊)]",
                "disabled": false,
                "runOnEdit": true,
                "findRegex": "/<plot>([\\s\\S]*?)</plot>/gsi",
                "replaceString": "",
                "trimStrings": [],
                "placement": [
                    2
                ],
                "substituteRegex": 0,
                "minDepth": 4,
                "maxDepth": null,
                "markdownOnly": true,
                "promptOnly": true
            },
            {
                "id": "77052179-920e-4b83-87f5-3dc4cef4a0c6",
                "scriptName": "【Dreammini】5.小总结(縮起)",
                "disabled": false,
                "runOnEdit": true,
                "findRegex": "/(?<!<details>\\s*)<summary>(((?!<summary>)[\\s\\S])*?)<\\/summary>/gsi",
                "replaceString": "<details>\n<summary>摘要</summary>\n$1\n</details>\n ",
                "trimStrings": [],
                "placement": [
                    2
                ],
                "substituteRegex": 0,
                "minDepth": null,
                "maxDepth": 20,
                "markdownOnly": true,
                "promptOnly": false
            },
            {
                "id": "9a7762c0-3e63-4502-bae5-10cf073fd5b6",
                "scriptName": "【Dreammini】5.小总结(移除)",
                "disabled": true,
                "runOnEdit": true,
                "findRegex": "/(?<!<details>\\s*)<summary>(((?!<summary>)[\\s\\S])*?)<\\/summary>/gsi",
                "replaceString": "",
                "trimStrings": [],
                "placement": [
                    2
                ],
                "substituteRegex": 0,
                "minDepth": null,
                "maxDepth": 20,
                "markdownOnly": true,
                "promptOnly": false
            },
            {
                "id": "18956466-025a-4e61-b88d-74e5d4088051",
                "scriptName": "【Dreammini】6.小总结(移除正文)",
                "disabled": false,
                "runOnEdit": true,
                "findRegex": "/[\\s\\S]*?(?<!<details>\\s*)<summary>([\\s\\S]*)<\\/summary>[\\s\\S]*/gsi",
                "replaceString": "<summary>\n$1\n</summary>",
                "trimStrings": [],
                "placement": [
                    2
                ],
                "substituteRegex": 0,
                "minDepth": 20,
                "maxDepth": null,
                "markdownOnly": false,
                "promptOnly": true
            },
            {
                "id": "dd994ad4-8957-4a56-9cc9-e4afa85acb2e",
                "scriptName": "【Dreammini】7.移除最近小总结",
                "disabled": false,
                "runOnEdit": true,
                "findRegex": "/(?<!<details>\\s*)<summary>(((?!<summary>)[\\s\\S])*?)<\\/summary>/gsi",
                "replaceString": "",
                "trimStrings": [],
                "placement": [
                    2
                ],
                "substituteRegex": 0,
                "minDepth": null,
                "maxDepth": 19,
                "markdownOnly": false,
                "promptOnly": true
            },
            {
                "id": "b31d0aec-eabd-4680-be70-a373a308cf65",
                "scriptName": "【Dreammini】8.点击选项(格式)",
                "disabled": false,
                "runOnEdit": true,
                "findRegex": "/<①>(.*?)<\\/①>.*?<②>(.*?)<\\/②>.*?<③>(.*?)<\\/③>.*?<④>(.*?)<\\/④>.*?<⑤>(.*?)<\\/⑤>.*?<⑥>(.*?)<\\/⑥>/s",
                "replaceString": "```html\n<!DOCTYPE html>\n<html>\n<head>\n<style>\n/* 增加了淡出动画和隐藏样式 */\n@keyframes fade-out-nova { from { opacity: 1; transform: scale(1); } to { opacity: 0; transform: scale(0.95); } }\n.nova-container.fading-out { animation: fade-out-nova 0.3s ease-out forwards; }\n\n:root {\n  --sky-blue-bg: linear-gradient(135deg, rgba(240, 248, 255, 0.97), rgba(220, 235, 255, 0.97));\n  --sky-blue-border: rgba(135, 206, 250, 0.7);\n  --sky-blue-shadow: rgba(135, 206, 250, 0.25);\n  --sky-blue-text: #4682B4;\n  --sky-blue-hover: rgba(135, 206, 250, 0.2);\n}\n@keyframes snowfall {\n  0% { transform: translateY(-100px) rotate(0deg); opacity: 0; }\n  50% { opacity: 1; }\n  100% { transform: translateY(300px) rotate(360deg); opacity: 0; }\n}\n@keyframes glowing-border-blue { 0%, 100% { border-color: rgba(135, 206, 250, 0.6); } 50% { border-color: rgba(173, 216, 230, 1); } }\n\n.theme-winter-love {\n  display: flex; /* 使用flex布局以确保响应性 */\n  justify-content: center;\n  width: 100%;\n  padding: 0 5px;\n  box-sizing: border-box;\n  font-family: 'Quicksand', sans-serif;\n  margin: 10px auto;\n}\n.card-winter-love {\n  flex-grow: 1;\n  max-width: 720px;\n  background: var(--sky-blue-bg);\n  border-radius: 16px;\n  padding: 8px;\n  box-shadow: 0 0 25px var(--sky-blue-shadow);\n  border: 2px solid var(--sky-blue-border);\n  backdrop-filter: blur(10px);\n  -webkit-backdrop-filter: blur(10px);\n  animation: glowing-border-blue 4s infinite ease-in-out;\n  position: relative;\n  overflow: hidden;\n}\n.snowflakes {\n  position: absolute;\n  top: 0; left: 0;\n  width: 100%; height: 100%;\n  pointer-events: none;\n}\n.snowflake {\n  position: absolute; color: var(--sky-blue-border); font-size: 20px;\n  opacity: 0; animation: snowfall 10s linear infinite;\n}\n.snowflake:nth-child(1) { left: 10%; animation-duration: 12s; animation-delay: 0s; }\n.snowflake:nth-child(2) { left: 20%; animation-duration: 8s; animation-delay: 3s; font-size: 15px; }\n.snowflake:nth-child(3) { left: 30%; animation-duration: 15s; animation-delay: 1s; }\n.snowflake:nth-child(4) { left: 50%; animation-duration: 9s; animation-delay: 5s; font-size: 12px; }\n.snowflake:nth-child(5) { left: 70%; animation-duration: 11s; animation-delay: 2s; }\n.snowflake:nth-child(6) { left: 85%; animation-duration: 13s; animation-delay: 7s; font-size: 18px; }\n\n.button-group-winter {\n    display: flex;\n    flex-direction: column;\n    gap: 5px;\n}\n.action-btn-winter {\n  border-radius: 9px; padding: 7px 14px; font-size: 17px;\n  font-weight: 500; cursor: pointer; text-align: left;\n  width: 100%; position: relative; overflow: hidden;\n  transition: all 0.2s ease; border: none;\n  background-color: rgba(135, 206, 250, 0.1);\n  color: var(--sky-blue-text);\n}\n.action-btn-winter:hover {\n  background-color: var(--sky-blue-hover);\n  transform: scale(1.015);\n}\n</style>\n</head>\n<body>\n<div class=\"theme-winter-love nova-container\"> <!-- 增加了nova-container类用于脚本选择 -->\n  <div class=\"card-winter-love\">\n    <div class=\"snowflakes\" aria-hidden=\"true\">\n      <div class=\"snowflake\">❄</div> <div class=\"snowflake\">❅</div> <div class=\"snowflake\">❄</div>\n      <div class=\"snowflake\">❅</div> <div class=\"snowflake\">❄</div> <div class=\"snowflake\">❅</div>\n    </div>\n    <div class=\"button-group-winter\">\n      <button class=\"action-btn-winter\" data-action=\"$1\">$1</button>\n      <button class=\"action-btn-winter\" data-action=\"$2\">$2</button>\n      <button class=\"action-btn-winter\" data-action=\"$3\">$3</button>\n      <button class=\"action-btn-winter\" data-action=\"$4\">$4</button>\n      <button class=\"action-btn-winter\" data-action=\"$5\">$5</button>\n      <button class=\"action-btn-winter\" data-action=\"$6\">$6</button>\n    </div>\n  </div>\n</div>\n<script>\ndocument.querySelectorAll('.action-btn-winter').forEach(btn => {\n  btn.addEventListener('click', (event) => {\n    const message = btn.getAttribute('data-action');\n    if (typeof triggerSlash === 'function') {\n      triggerSlash(`/send ${message}|/trigger`);\n    } else {\n        console.log('triggerSlash未定义');\n    }\n    // 关键改动：让整个选择框消失\n    const container = btn.closest('.nova-container');\n    if (container) {\n      container.classList.add('fading-out');\n      setTimeout(() => {\n        container.style.display = 'none';\n      }, 300); // 动画时长为300ms\n    }\n  });\n});\n</script>\n</body>\n</html>\n```",
                "trimStrings": [],
                "placement": [
                    2
                ],
                "substituteRegex": 0,
                "minDepth": null,
                "maxDepth": 2,
                "markdownOnly": true,
                "promptOnly": false
            },
            {
                "id": "4c4f6a63-0ee7-404a-b31e-1e61232f0c7b",
                "scriptName": "【Dreammini】8.选项(格式)",
                "disabled": true,
                "runOnEdit": true,
                "findRegex": "/<options>\\s*(1\\.[^\\n]*)\\s*(2\\.[^\\n]*)\\s*(3\\.[^\\n]*)\\s*(4\\.[^\\n]*)\\s*(5\\.[^\\n]*)\\s*(6\\.[^\\n]*)\\s*(7\\.[^\\n]*)\\s*(8\\.[^\\n]*)\\s*(9\\.[^\\n]*)\\s*<\\/options>/gsi",
                "replaceString": "\n<options><details><summary style=\"background-color: #000000; color: #ffffff; padding: 5px; font-weight: bold; border-radius: 5px;\">故事选项</summary><div style=\"background-color: #000000; color: #ffffff; padding: 15px; border-radius: 0 0 5px 5px;\"><p style=\"margin: 5px 0;\">以下为当前场景下的可选行动，选择数字1-9（可複选），或使用10自行输入：</p><ul style=\"list-style-type: none; padding-left: 0;\"><li>\"$1\" <br> </li><li>\"$2\"<br> </li><li>\"$3\"<br></li><li>\"$4\"<br></li><li>\"$5\"<br></li><li>\"$6\"<br> </li><li>\"$7\"<br></li><li>\"$8\"<br></li><li>\"$9\" </li></ul></div></details></options>\n",
                "trimStrings": [],
                "placement": [
                    2
                ],
                "substituteRegex": 0,
                "minDepth": null,
                "maxDepth": 20,
                "markdownOnly": true,
                "promptOnly": false
            },
            {
                "id": "eb3db98a-6a27-4f32-8e80-4a3014d9913a",
                "scriptName": "【Dreammini】9.点击选项(消除)",
                "disabled": false,
                "runOnEdit": true,
                "findRegex": "/<①>(.*?)<\\/①>.*?<②>(.*?)<\\/②>.*?<③>(.*?)<\\/③>.*?<④>(.*?)<\\/④>.*?<⑤>(.*?)<\\/⑤>.*?<⑥>(.*?)<\\/⑥>/s",
                "replaceString": "",
                "trimStrings": [],
                "placement": [
                    2
                ],
                "substituteRegex": 0,
                "minDepth": null,
                "maxDepth": null,
                "markdownOnly": true,
                "promptOnly": true
            },
            {
                "id": "c28179a9-f094-4df5-a8a9-29c6f46fdd8a",
                "scriptName": "【Dreammini】9.选项(移除)",
                "disabled": true,
                "runOnEdit": true,
                "findRegex": "/<options[^>]*>[\\s\\S]*?</options>/gsi",
                "replaceString": "",
                "trimStrings": [],
                "placement": [
                    2
                ],
                "substituteRegex": 0,
                "minDepth": 3,
                "maxDepth": null,
                "markdownOnly": false,
                "promptOnly": true
            }
        ],
        "character_allowed_regex": [],
        "tts": {
            "voiceMap": "",
            "ttsEnabled": false,
            "currentProvider": "System",
            "auto_generation": true,
            "ElevenLabs": {},
            "System": {},
            "narrate_user": false,
            "playback_rate": 1
        },
        "sd": {
            "scale_min": 1,
            "scale_max": 30,
            "scale_step": 0.5,
            "scale": 7,
            "steps_min": 1,
            "steps_max": 150,
            "steps_step": 1,
            "steps": 20,
            "dimension_min": 64,
            "dimension_max": 2048,
            "dimension_step": 64,
            "width": 512,
            "height": 512,
            "prompt_prefix": "best quality, absurdres, masterpiece,",
            "negative_prompt": "lowres, bad anatomy, bad hands, text, error, cropped, worst quality, low quality, normal quality, jpeg artifacts, signature, watermark, username, blurry",
            "sampler": "DDIM",
            "model": "",
            "restore_faces": false,
            "enable_hr": false,
            "horde": true,
            "horde_nsfw": false,
            "horde_karras": true,
            "refine_mode": false,
            "prompts": {
                "0": "In the next response I want you to provide only a detailed comma-delimited list of keywords and phrases which describe {{char}}. The list must include all of the following items in this order: name, species and race, gender, age, clothing, occupation, physical features and appearances. Do not include descriptions of non-visual qualities such as personality, movements, scents, mental traits, or anything which could not be seen in a still photograph. Do not write in full sentences. Prefix your description with the phrase 'full body portrait,'",
                "1": "Ignore previous instructions and provide a detailed description of {{user}}'s physical appearance from the perspective of {{char}} in the form of a comma-delimited list of keywords and phrases. The list must include all of the following items in this order: name, species and race, gender, age, clothing, occupation, physical features and appearances. Do not include descriptions of non-visual qualities such as personality, movements, scents, mental traits, or anything which could not be seen in a still photograph. Do not write in full sentences. Prefix your description with the phrase 'full body portrait,'. Ignore the rest of the story when crafting this description. Do not reply as {{char}} when writing this description, and do not attempt to continue the story.",
                "2": "Ignore previous instructions and provide a detailed description for all of the following: a brief recap of recent events in the story, {{char}}'s appearance, and {{char}}'s surroundings. Do not reply as {{char}} when writing this description, and do not attempt to continue the story.",
                "3": "Ignore previous instructions and provide ONLY the last chat message string back to me verbatim. Do not write anything after the string. Do not reply as {{char}} when writing this description, and do not attempt to continue the story.",
                "4": "Ignore previous instructions. Your next response must be formatted as a single comma-delimited list of concise keywords.  The list will describe of the visual details included in the last chat message.\n\n    Only mention characters by using pronouns ('he','his','she','her','it','its') or neutral nouns ('male', 'the man', 'female', 'the woman').\n\n    Ignore non-visible things such as feelings, personality traits, thoughts, and spoken dialog.\n\n    Add keywords in this precise order:\n    a keyword to describe the location of the scene,\n    a keyword to mention how many characters of each gender or type are present in the scene (minimum of two characters:\n    {{user}} and {{char}}, example: '2 men ' or '1 man 1 woman ', '1 man 3 robots'),\n\n    keywords to describe the relative physical positioning of the characters to each other (if a commonly known term for the positioning is known use it instead of describing the positioning in detail) + 'POV',\n\n    a single keyword or phrase to describe the primary act taking place in the last chat message,\n\n    keywords to describe {{char}}'s physical appearance and facial expression,\n    keywords to describe {{char}}'s actions,\n    keywords to describe {{user}}'s physical appearance and actions.\n\n    If character actions involve direct physical interaction with another character, mention specifically which body parts interacting and how.\n\n    A correctly formatted example response would be:\n    '(location),(character list by gender),(primary action), (relative character position) POV, (character 1's description and actions), (character 2's description and actions)'",
                "5": "In the next response I want you to provide only a detailed comma-delimited list of keywords and phrases which describe {{char}}. The list must include all of the following items in this order: name, species and race, gender, age, facial features and expressions, occupation, hair and hair accessories (if any), what they are wearing on their upper body (if anything). Do not describe anything below their neck. Do not include descriptions of non-visual qualities such as personality, movements, scents, mental traits, or anything which could not be seen in a still photograph. Do not write in full sentences. Prefix your description with the phrase 'close up facial portrait,'",
                "7": "Ignore previous instructions and provide a detailed description of {{char}}'s surroundings in the form of a comma-delimited list of keywords and phrases. The list must include all of the following items in this order: location, time of day, weather, lighting, and any other relevant details. Do not include descriptions of characters and non-visual qualities such as names, personality, movements, scents, mental traits, or anything which could not be seen in a still photograph. Do not write in full sentences. Prefix your description with the phrase 'background,'. Ignore the rest of the story when crafting this description. Do not reply as {{user}} when writing this description, and do not attempt to continue the story.",
                "8": "Provide an exhaustive comma-separated list of tags describing the appearance of the character on this image in great detail. Start with \"full body portrait\".",
                "9": "Provide an exhaustive comma-separated list of tags describing the appearance of the character on this image in great detail. Start with \"full body portrait\".",
                "10": "Provide an exhaustive comma-separated list of tags describing the appearance of the character on this image in great detail. Start with \"close-up portrait\".",
                "11": "Ignore previous instructions and provide an exhaustive comma-separated list of tags describing the appearance of \"{0}\" in great detail. Start with {{charPrefix}} (sic) if the subject is associated with {{char}}.",
                "-1": "[{{char}} sends a picture that contains: {{prompt}}].",
                "-2": "The text prompt used to generate the image. Must represent an exhaustive description of the desired image that will allow an artist or a photographer to perfectly recreate it."
            },
            "character_prompts": {},
            "source": "extras",
            "scheduler": "normal",
            "vae": "",
            "seed": -1,
            "adetailer_face": false,
            "horde_sanitize": true,
            "interactive_mode": false,
            "multimodal_captioning": false,
            "snap": false,
            "free_extend": false,
            "function_tool": false,
            "auto_url": "http://localhost:7860",
            "auto_auth": "",
            "vlad_url": "http://localhost:7860",
            "vlad_auth": "",
            "drawthings_url": "http://localhost:7860",
            "drawthings_auth": "",
            "hr_upscaler": "Latent",
            "hr_scale": 1,
            "hr_scale_min": 1,
            "hr_scale_max": 4,
            "hr_scale_step": 0.1,
            "denoising_strength": 0.7,
            "denoising_strength_min": 0,
            "denoising_strength_max": 1,
            "denoising_strength_step": 0.01,
            "hr_second_pass_steps": 0,
            "hr_second_pass_steps_min": 0,
            "hr_second_pass_steps_max": 150,
            "hr_second_pass_steps_step": 1,
            "clip_skip_min": 1,
            "clip_skip_max": 12,
            "clip_skip_step": 1,
            "clip_skip": 1,
            "novel_anlas_guard": false,
            "novel_sm": false,
            "novel_sm_dyn": false,
            "novel_decrisper": false,
            "openai_style": "vivid",
            "openai_quality": "standard",
            "style": "Default",
            "styles": [
                {
                    "name": "Default",
                    "negative": "lowres, bad anatomy, bad hands, text, error, cropped, worst quality, low quality, normal quality, jpeg artifacts, signature, watermark, username, blurry",
                    "prefix": "best quality, absurdres, aesthetic,"
                }
            ],
            "comfy_url": "http://127.0.0.1:8188",
            "comfy_workflow": "Default_Comfy_Workflow.json",
            "pollinations_enhance": false,
            "wand_visible": false,
            "command_visible": false,
            "interactive_visible": false,
            "tool_visible": false,
            "stability_style_preset": "anime",
            "bfl_upsampling": false,
            "google_api": "makersuite",
            "google_enhance": true,
            "character_negative_prompts": {}
        },
        "chromadb": {},
        "translate": {
            "target_language": "en",
            "internal_language": "en",
            "provider": "google",
            "auto_mode": "none",
            "deepl_endpoint": "free"
        },
        "objective": {
            "customPrompts": {
                "default": {
                    "createTask": "Ignore previous instructions and generate a list of tasks to complete an objective. Your next response must be formatted as a numbered list of plain text entries. Do not include anything but the numbered list. The list must be prioritized in the order that tasks must be completed.\n\nThe objective that you must make a numbered task list for is: [{{objective}}].\nThe tasks created should take into account the character traits of {{char}}. These tasks may or may not involve {{user}} directly. Be sure to include the objective as the final task.\n\nGiven an example objective of 'Make me a four course dinner', here is an example output:\n1. Determine what the courses will be\n2. Find recipes for each course\n3. Go shopping for supplies with {{user}}\n4. Cook the food\n5. Get {{user}} to set the table\n6. Serve the food\n7. Enjoy eating the meal with {{user}}\n    ",
                    "checkTaskCompleted": "Ignore previous instructions. Determine if this task is completed: [{{task}}].\nTo do this, examine the most recent messages. Your response must only contain either true or false, nothing other words.\nExample output:\ntrue\n    ",
                    "currentTask": "Your current task is [{{task}}]. Balance existing story with completing this task."
                }
            }
        },
        "quickReply": {
            "quickReplyEnabled": false,
            "numberOfSlots": 5,
            "quickReplySlots": [
                {
                    "mes": "",
                    "label": "",
                    "enabled": true
                },
                {
                    "mes": "",
                    "label": "",
                    "enabled": true
                },
                {
                    "mes": "",
                    "label": "",
                    "enabled": true
                },
                {
                    "mes": "",
                    "label": "",
                    "enabled": true
                },
                {
                    "mes": "",
                    "label": "",
                    "enabled": true
                }
            ]
        },
        "randomizer": {
            "controls": [],
            "fluctuation": 0.1,
            "enabled": false
        },
        "speech_recognition": {
            "currentProvider": "None",
            "messageMode": "append",
            "messageMappingText": "",
            "messageMapping": [],
            "messageMappingEnabled": false,
            "None": {}
        },
        "rvc": {
            "enabled": false,
            "model": "",
            "pitchOffset": 0,
            "pitchExtraction": "dio",
            "indexRate": 0.88,
            "filterRadius": 3,
            "rmsMixRate": 1,
            "protect": 0.33,
            "voicMapText": "",
            "voiceMap": {}
        },
        "hypebot": {},
        "vectors": {},
        "variables": {
            "global": {}
        },
        "attachments": [],
        "character_attachments": {},
        "disabled_attachments": [],
        "gallery": {
            "folders": {},
            "sort": "dateAsc"
        },
        "cfg": {
            "global": {
                "guidance_scale": 1,
                "negative_prompt": ""
            },
            "chara": []
        },
        "quickReplyV2": {
            "isEnabled": false,
            "isCombined": false,
            "isPopout": false,
            "config": {
                "setList": [
                    {
                        "set": "Default",
                        "isVisible": true
                    }
                ]
            }
        },
        "TavernHelper": {
            "enabled_extension": true,
            "render": {
                "render_enabled": true,
                "tampermonkey_compatibility": false,
                "render_depth": 0,
                "render_optimize": false
            },
            "script": {
                "global_script_enabled": true,
                "scriptsRepository": [
                    {
                        "type": "script",
                        "value": {
                            "id": "f7412d63-cd31-49bb-ab27-ed14f77fcd8f",
                            "name": "[UI]正则&脚本自动分组+筛选查看",
                            "content": "const config_CONFIG = {\n  STORAGE_KEY_BASE: \"scriptGroupingEnabled\",\n  getStorageKey: function (areaKey) {\n    return `${this.STORAGE_KEY_BASE}_${areaKey}`;\n  },\n  GROUP_PREFIX_REGEX: /^(?:【([^】]+)】|\\[([^\\]]+)\\]|([^-\\s]+)-)\\s*(.+)$/,\n  AREAS: {\n    \"global-regex\": {\n      titleSelector: \"#global_scripts_block > div:first-child\",\n      listSelector: \"#saved_regex_scripts\",\n      itemSelector: \".regex-script-label\",\n      nameSelector: \".regex_script_name\",\n      dragHandleSelector: \".drag-handle\",\n      sortableId: \"#saved_regex_scripts\",\n      isRegexType: !0,\n    },\n    \"scoped-regex\": {\n      titleSelector:\n        \"#scoped_scripts_block .flex-container.alignItemsBaseline strong\",\n      listSelector: \"#saved_scoped_scripts\",\n      itemSelector: \".regex-script-label\",\n      nameSelector: \".regex_script_name\",\n      dragHandleSelector: \".drag-handle\",\n      sortableId: \"#saved_scoped_scripts\",\n      isRegexType: !0,\n    },\n    \"global-script\": {\n      titleSelector: '.settings-title-text:contains(\"全局脚本库\")',\n      listSelector: \"#global-script-list\",\n      itemSelector: \".script-item\",\n      nameSelector: \".script-name\",\n      dragHandleSelector: \".drag-handle\",\n      sortableId: \"#global-script-list\",\n      isRegexType: !1,\n    },\n    \"scoped-script\": {\n      titleSelector: '.settings-title-text:contains(\"局部脚本库\")',\n      listSelector: \"#scoped-script-list\",\n      itemSelector: \".script-item\",\n      nameSelector: \".script-name\",\n      dragHandleSelector: \".drag-handle\",\n      sortableId: \"#scoped-script-list\",\n      isRegexType: !1,\n    },\n  },\n  STYLES: {\n    groupHeaderStyle:\n      \"\\n            padding: 4px 10px;\\n            background: var(--SmartThemeBorderColor, rgba(240, 240, 240, 0.2));\\n            border-radius: 4px;\\n            margin: 4px 0;\\n            cursor: pointer;\\n            display: flex;\\n            justify-content: space-between;\\n            align-items: center;\\n            font-weight: bold;\\n            border-left: 2px solid var(--SmartThemeUnderlineColor, rgba(52, 152, 219, 0.4));\\n            width: 100%;\\n        \",\n    groupContentStyle:\n      \"\\n            padding-left: 6px;\\n            border-left: 1px dashed var(--SmartThemeEmColor, rgba(204, 204, 204, 0.4));\\n            margin-left: 12px;\\n            width: 100%;\\n        \",\n    iconStyle:\n      \"\\n            cursor: pointer;\\n            margin-left: 8px;\\n            font-size: 0.9em;\\n            color: var(--SmartThemeBodyColor, inherit);\\n        \",\n    toggleAllButtonStyle:\n      \"\\n            font-size: 0.9em;\\n            cursor: pointer;\\n            margin-left: 5px;\\n            color: var(--SmartThemeBodyColor, inherit);\\n        \",\n    // 新增：模态窗口样式（完全重构，确保完美居中）\n    modalOverlayStyle:\n      \"\\n            position: fixed !important;\\n            top: 0 !important;\\n            left: 0 !important;\\n            width: 100vw !important;\\n            height: 100vh !important;\\n            background: rgba(0, 0, 0, 0.6);\\n            z-index: 99999 !important;\\n            display: flex !important;\\n            justify-content: center !important;\\n            align-items: center !important;\\n            padding: clamp(8px, 2vw, 20px) !important;\\n            box-sizing: border-box !important;\\n            overflow: hidden !important;\\n        \",\n    modalContentStyle:\n      \"\\n            background: var(--SmartThemeBlurTintColor, #1a1a1a);\\n            border: 1px solid var(--SmartThemeBorderColor, rgba(240, 240, 240, 0.3));\\n            border-radius: clamp(6px, 1vw, 12px);\\n            width: 100%;\\n            max-width: min(600px, 95vw);\\n            max-height: min(90vh, calc(100vh - 20px));\\n            min-height: min(300px, 80vh);\\n            display: flex;\\n            flex-direction: column;\\n            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.4);\\n            margin: 0 !important;\\n            position: relative;\\n            overflow: hidden;\\n            transform: translateZ(0);\\n        \",\n    modalHeaderStyle:\n      \"\\n            padding: clamp(12px, 3vw, 16px);\\n            border-bottom: 1px solid var(--SmartThemeBorderColor, rgba(240, 240, 240, 0.2));\\n            font-weight: bold;\\n            font-size: clamp(1em, 4vw, 1.2em);\\n            display: flex;\\n            justify-content: space-between;\\n            align-items: center;\\n            flex-shrink: 0;\\n            word-break: break-word;\\n            background: var(--SmartThemeBlurTintColor, rgba(30, 30, 30, 0.9));\\n        \",\n    modalBodyStyle:\n      \"\\n            padding: clamp(12px, 3vw, 20px);\\n            overflow-y: auto;\\n            overflow-x: hidden;\\n            flex: 1;\\n            min-height: 0;\\n            -webkit-overflow-scrolling: touch;\\n            scroll-behavior: smooth;\\n        \",\n    modalFooterStyle:\n      \"\\n            padding: clamp(12px, 3vw, 16px);\\n            border-top: 1px solid var(--SmartThemeBorderColor, rgba(240, 240, 240, 0.2));\\n            display: flex;\\n            justify-content: flex-end;\\n            gap: clamp(6px, 2vw, 12px);\\n            flex-shrink: 0;\\n            flex-wrap: wrap;\\n            background: var(--SmartThemeBlurTintColor, rgba(30, 30, 30, 0.9));\\n        \",\n    regexItemStyle:\n      \"\\n            display: flex;\\n            align-items: flex-start;\\n            padding: 12px;\\n            margin: 6px 0;\\n            background: var(--SmartThemeBlurTintColor, rgba(40, 40, 40, 0.8));\\n            border: 1px solid var(--SmartThemeBorderColor, rgba(240, 240, 240, 0.1));\\n            border-radius: 4px;\\n            transition: background-color 0.2s;\\n            min-height: 44px;\\n        \",\n    regexItemHoverStyle:\n      \"\\n            background: var(--SmartThemeBorderColor, rgba(60, 60, 60, 0.8));\\n        \",\n    buttonStyle:\n      \"\\n            padding: clamp(10px, 3vw, 16px);\\n            border: 1px solid var(--SmartThemeBorderColor, rgba(240, 240, 240, 0.3));\\n            border-radius: clamp(4px, 1vw, 8px);\\n            cursor: pointer;\\n            font-size: clamp(14px, 3.5vw, 16px);\\n            transition: all 0.2s ease;\\n            min-height: clamp(44px, 8vw, 48px);\\n            min-width: clamp(60px, 15vw, 80px);\\n            display: flex;\\n            align-items: center;\\n            justify-content: center;\\n            white-space: nowrap;\\n            line-height: 1.2;\\n            font-weight: 500;\\n        \",\n    primaryButtonStyle:\n      \"\\n            background: var(--SmartThemeUnderlineColor, rgba(52, 152, 219, 0.6));\\n            color: white;\\n        \",\n    secondaryButtonStyle:\n      \"\\n            background: transparent;\\n            color: var(--SmartThemeBodyColor, inherit);\\n        \",\n  },\n};\nfunction groupScripts($items, nameSelector, isRegexType) {\n  const groups = [];\n  let currentGroup = null,\n    currentGroupItems = [];\n  if (!$items || 0 === $items.length)\n    return console.error(\"没有提供有效的条目列表进行分组\"), groups;\n  $items.each(function (index) {\n    const $item = $(this),\n      scriptName = (function extractScriptName(\n        $item,\n        nameSelector,\n        isRegexType\n      ) {\n        try {\n          let $nameElement = $item.find(nameSelector);\n          if (0 === $nameElement.length)\n            if (isRegexType) {\n              const regexSelectors = [\n                \".regex_script_name\",\n                \".name\",\n                \"div.flexGrow\",\n                \"div:first\",\n              ];\n              for (const selector of regexSelectors)\n                if (\n                  (($nameElement = $item.find(selector)),\n                  $nameElement.length > 0)\n                )\n                  break;\n            } else {\n              const scriptSelectors = [\n                \".script-name\",\n                \".name\",\n                \".script-title\",\n                \"div:first\",\n              ];\n              for (const selector of scriptSelectors)\n                if (\n                  (($nameElement = $item.find(selector)),\n                  $nameElement.length > 0)\n                )\n                  break;\n            }\n          if ($nameElement.length > 0) return $nameElement.text().trim();\n        } catch (e) {\n          console.error(\"提取脚本名称出错:\", e);\n        }\n        return null;\n      })($item, nameSelector, isRegexType);\n    if (!scriptName)\n      return (\n        console.warn(`项目 #${index} 无法提取名称，跳过分组`),\n        null !== currentGroup &&\n          currentGroupItems.length > 0 &&\n          (groups.push({\n            name: currentGroup,\n            items: currentGroupItems.slice(),\n          }),\n          (currentGroupItems = [])),\n        groups.push({ name: null, items: [$item] }),\n        (currentGroup = null),\n        !0\n      );\n    const groupName = (function detectGroup(scriptName) {\n      if (!scriptName || \"string\" != typeof scriptName) return null;\n      const match = scriptName.match(config_CONFIG.GROUP_PREFIX_REGEX);\n      \n      if (match) {\n        // 按优先级返回匹配的分组名\n        const extractedGroupName = match[1] || match[2] || match[3];\n        if (extractedGroupName && extractedGroupName.trim()) {\n          return extractedGroupName.trim();\n        }\n      }\n      \n      // 没有匹配到分组模式时返回 null\n      return null;\n    })(scriptName);\n    null === groupName\n      ? null === currentGroup\n        ? currentGroupItems.push($item)\n        : (groups.push({\n            name: currentGroup,\n            items: currentGroupItems.slice(),\n          }),\n          (currentGroup = null),\n          (currentGroupItems = [$item]))\n      : currentGroup === groupName\n      ? currentGroupItems.push($item)\n      : (currentGroupItems.length > 0 &&\n          groups.push({ name: currentGroup, items: currentGroupItems.slice() }),\n        (currentGroup = groupName),\n        (currentGroupItems = [$item]));\n  }),\n    currentGroupItems.length > 0 &&\n      groups.push({ name: currentGroup, items: currentGroupItems.slice() });\n  let groupedItems = 0;\n  return (\n    groups.forEach((group) => {\n      null !== group.name ? 0 : 0, (groupedItems += group.items.length);\n    }),\n    groupedItems !== $items.length &&\n      console.warn(\n        `警告：处理的项目数 (${groupedItems}) 与原始项目数 (${$items.length}) 不一致！`\n      ),\n    groups\n  );\n}\nlet isDebouncing = !1,\n  operationStartTime = 0,\n  debouncedButtons = [];\nconst operationQueue = [];\nasync function debounceUI(callback, options = {}) {\n  const { minDelay = 100, operationName = \"操作\" } =\n    \"number\" == typeof options ? { minDelay: options } : options;\n  if (isDebouncing) return null;\n  try {\n    (isDebouncing = !0),\n      (operationStartTime = performance.now()),\n      (function dimAllButtons() {\n        (debouncedButtons = []),\n          $(\n            'i[id$=\"-filter-icon\"], i[id$=\"-group-icon\"], i[id$=\"-toggle-all\"], i[id$=\"-refresh-icon\"], .group-toggle-icon'\n          ).each(function () {\n            const $button = $(this),\n              buttonInfo = {\n                $button,\n                originalOpacity: \"1\",\n                originalPointerEvents: \"auto\",\n              };\n            $button.css({\n              opacity: \"0.3\",\n              \"pointer-events\": \"none\",\n              transition: \"opacity 0.05s\",\n            }),\n              debouncedButtons.push(buttonInfo);\n          });\n      })();\n    const result = await callback(),\n      operationDuration = performance.now() - operationStartTime,\n      cooldownTime = Math.max(\n        (function calculateCooldownTime(operationDuration) {\n          return 100 + Math.min(0.5 * operationDuration, 1e3);\n        })(operationDuration),\n        minDelay\n      );\n    return (\n      await new Promise((resolve) => setTimeout(resolve, cooldownTime)), result\n    );\n  } catch (error) {\n    return console.error(`[FilterGroup]${operationName}执行出错:`, error), null;\n  } finally {\n    !(function restoreAllButtons() {\n      if (!debouncedButtons || 0 === debouncedButtons.length)\n        return (\n          console.debug(\"[FilterGroup]没有需要恢复的按钮\"),\n          void (debouncedButtons = [])\n        );\n      debouncedButtons.forEach((buttonInfo, index) => {\n        try {\n          if (\n            !buttonInfo ||\n            !buttonInfo.$button ||\n            0 === buttonInfo.$button.length\n          )\n            return void console.warn(`[FilterGroup]按钮对象无效 [${index}]`);\n          buttonInfo.$button.css({\n            opacity: buttonInfo.originalOpacity || \"1\",\n            \"pointer-events\": buttonInfo.originalPointerEvents || \"auto\",\n            transition: \"opacity 0.05s\",\n          });\n        } catch (error) {\n          console.error(`[FilterGroup]恢复按钮[${index}]状态出错:`, error);\n        }\n      }),\n        debouncedButtons.length,\n        (debouncedButtons = []);\n    })(),\n      (isDebouncing = !1),\n      operationQueue.length > 0 && setTimeout(processNextOperation, 100);\n  }\n}\nfunction processNextOperation() {\n  if (0 === operationQueue.length || isDebouncing) return;\n  const nextOperation = operationQueue.shift();\n  nextOperation\n    .callback()\n    .then((result) => {\n      operationQueue.length > 0 && setTimeout(processNextOperation, 100);\n    })\n    .catch((error) => {\n      console.error(\n        `[FilterGroup]队列操作 ${nextOperation.name} 执行出错:`,\n        error\n      ),\n        operationQueue.length > 0 && setTimeout(processNextOperation, 100);\n    });\n}\nfunction isUIDebouncing() {\n  return isDebouncing;\n}\nfunction addDebouncedClickHandler(selector, callback, options = {}) {\n  const {\n    stopPropagation = true,\n    minDelay = 100,\n    operationName = null,\n  } = options;\n  \n  const handlerId = `handler_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  \n  try {\n    const $elements = typeof selector === 'string' ? $(selector) : selector;\n    \n    if ($elements.length === 0) {\n      console.warn(`[FilterGroup] [${handlerId}] 未找到匹配选择器的元素: ${selector}`);\n      return;\n    }\n    \n    console.log(`[FilterGroup] [${handlerId}] 为 ${$elements.length} 个元素绑定点击事件处理器`);\n    \n    // 使用事件委托确保动态添加的元素也能响应事件\n    const eventNamespace = `click.filtergroup.${handlerId}`;\n    \n    $elements\n      .off(eventNamespace) // 先移除可能存在的旧事件处理器\n      .on(eventNamespace, async function (e) {\n        const eventId = `event_${Date.now()}_${Math.random().toString(36).substr(2, 6)}`;\n        \n        try {\n          if (stopPropagation) {\n            e.stopPropagation();\n            e.preventDefault();\n          }\n          \n          if (isUIDebouncing()) {\n            console.log(`[FilterGroup] [${eventId}] UI正在防抖中，忽略此次点击事件`);\n            return;\n          }\n\n          const $this = $(this);\n          const buttonText = $this.attr('title') || $this.text() || $this.attr('class') || '未知按钮';\n          const opName = operationName || buttonText;\n          \n          console.log(`[FilterGroup] [${eventId}] 开始处理点击事件: ${opName}`);\n          console.log(`[FilterGroup] [${eventId}] 目标元素:`, $this[0]);\n          \n          try {\n            const result = await debounceUI(async () => {\n              console.log(`[FilterGroup] [${eventId}] 执行回调函数...`);\n              const callbackResult = await callback.call(this, e, $this);\n              console.log(`[FilterGroup] [${eventId}] 回调函数执行完成，结果:`, callbackResult);\n              return callbackResult;\n            }, {\n              minDelay,\n              operationName: opName,\n            });\n            \n            console.log(`[FilterGroup] [${eventId}] 事件处理完成，结果:`, result);\n            \n          } catch (callbackError) {\n            console.error(`[FilterGroup] [${eventId}] 回调函数执行失败:`, callbackError);\n            throw callbackError;\n          }\n          \n        } catch (error) {\n          console.error(`[FilterGroup] [${eventId}] 事件处理器执行出错 (${opName}):`, error);\n          \n          // 提供用户友好的错误提示\n          if (window.alert && opName && !opName.includes('未知')) {\n            window.alert(`操作\"${opName}\"执行失败: ${error.message}\\n\\n请刷新页面后重试。`);\n          }\n        }\n      });\n      \n    console.log(`[FilterGroup] [${handlerId}] 事件处理器绑定完成`);\n    \n  } catch (error) {\n    console.error(`[FilterGroup] [${handlerId}] 添加点击事件处理器出错:`, error);\n  }\n}\nfunction addFilterIcon(\n  $titleElem,\n  areaKey,\n  getFilterState,\n  updateFilterIcon,\n  applyUIState,\n  capitalizeFirstLetter\n) {\n  const filterIconId = `${areaKey}-filter-icon`;\n  0 === $(`#${filterIconId}`).length &&\n    ($titleElem.append(\n      `<i id=\"${filterIconId}\" class=\"fa-solid fa-filter\" style=\"${config_CONFIG.STYLES.iconStyle}\"></i>`\n    ),\n    addDebouncedClickHandler(\n      `#${filterIconId}`,\n      function (e) {\n        const newState = (getFilterState(areaKey) + 1) % 3;\n        return (\n          localStorage.setItem(\n            `regexFilter${capitalizeFirstLetter(areaKey)}`,\n            newState\n          ),\n          updateFilterIcon(areaKey),\n          applyUIState(areaKey)\n        );\n      },\n      { operationName: `筛选切换(${areaKey})` }\n    ),\n    updateFilterIcon(areaKey));\n}\nfunction addGroupIcons(\n  $titleElem,\n  areaKey,\n  getGroupingEnabledState,\n  updateGroupIcon,\n  applyUIState\n) {\n  const groupIconId = `${areaKey}-group-icon`;\n  if (0 === $(`#${groupIconId}`).length) {\n    const isGroupEnabled = getGroupingEnabledState(areaKey);\n    $titleElem.append(\n      `<i id=\"${groupIconId}\" class=\"fa-solid ${\n        isGroupEnabled ? \"fa-folder-open\" : \"fa-folder\"\n      }\" style=\"${config_CONFIG.STYLES.iconStyle}\" title=\"${\n        isGroupEnabled ? \"关闭分组\" : \"开启分组\"\n      }\"></i>`\n    ),\n      (function addToggleAllIcon($titleElem, areaKey, isGroupEnabled) {\n        const toggleAllId = `${areaKey}-toggle-all`;\n        0 === $(`#${toggleAllId}`).length &&\n          ($titleElem.append(\n            `<i id=\"${toggleAllId}\" class=\"fa-solid fa-angle-down\" style=\"${config_CONFIG.STYLES.toggleAllButtonStyle}\" title=\"一键展开/折叠分组\"></i>`\n          ),\n          isGroupEnabled\n            ? $(`#${toggleAllId}`).css(\"display\", \"\")\n            : $(`#${toggleAllId}`).css(\"display\", \"none\"),\n          (function bindToggleAllEvent(toggleAllId, areaKey) {\n            addDebouncedClickHandler(\n              `#${toggleAllId}`,\n              function (e, $this) {\n                const isExpand = $this.hasClass(\"fa-angle-down\");\n                return (\n                  $this.attr(\n                    \"class\",\n                    \"fa-solid \" + (isExpand ? \"fa-angle-up\" : \"fa-angle-down\")\n                  ),\n                  $this.attr(\n                    \"title\",\n                    isExpand ? \"一键折叠分组\" : \"一键展开分组\"\n                  ),\n                  (function toggleAllGroups(areaKey, isExpand) {\n                    const $area = $(config_CONFIG.AREAS[areaKey].listSelector);\n                    $area.find(\".script-group-header\").each(function () {\n                      const $header = $(this),\n                        $groupContent = $header.next(\".script-group-content\"),\n                        $icon = $header.find(\".group-toggle-icon\");\n                      isExpand\n                        ? ($groupContent.show(),\n                          $icon.attr(\n                            \"class\",\n                            \"fa-solid fa-angle-up group-toggle-icon\"\n                          ))\n                        : ($groupContent.hide(),\n                          $icon.attr(\n                            \"class\",\n                            \"fa-solid fa-angle-down group-toggle-icon\"\n                          ));\n                    }),\n                      (function saveAllGroupFoldStates(areaKey, allFolded) {\n                        const $area = $(\n                            config_CONFIG.AREAS[areaKey].listSelector\n                          ),\n                          foldStates = {};\n                        $area.find(\".script-group-header\").each(function () {\n                          const groupName = $(this)\n                            .find(\"span\")\n                            .text()\n                            .split(\" (\")[0];\n                          foldStates[groupName] = allFolded;\n                        });\n                        const storageKey = `script_group_fold_state_${areaKey}`;\n                        localStorage.setItem(\n                          storageKey,\n                          JSON.stringify(foldStates)\n                        );\n                      })(areaKey, !isExpand);\n                  })(areaKey, isExpand)\n                );\n              },\n              { operationName: `一键展开/折叠分组(${areaKey})` }\n            );\n          })(toggleAllId, areaKey));\n      })($titleElem, areaKey, isGroupEnabled),\n      addDebouncedClickHandler(\n        `#${groupIconId}`,\n        function (e) {\n          const newState = !getGroupingEnabledState(areaKey);\n          return (\n            localStorage.setItem(\n              config_CONFIG.getStorageKey(areaKey),\n              newState\n            ),\n            updateGroupIcon(areaKey),\n            applyUIState(areaKey)\n          );\n        },\n        { operationName: `分组切换(${areaKey})` }\n      ),\n      updateGroupIcon(areaKey);\n  }\n}\nfunction addRefreshIcon($titleElem, areaKey, applyAllUIStates) {\n  const refreshIconId = `${areaKey}-refresh-icon`;\n  0 === $(`#${refreshIconId}`).length &&\n    ($titleElem.append(\n      `<i id=\"${refreshIconId}\" class=\"fa-solid fa-rotate\" style=\"${config_CONFIG.STYLES.iconStyle}\" title=\"刷新\"></i>`\n    ),\n    addDebouncedClickHandler(\n      `#${refreshIconId}`,\n      function () {\n        return applyAllUIStates();\n      },\n      { operationName: `刷新UI(${areaKey})` }\n    ));\n}\n\n// 新增：为局部正则脚本添加\"全部移至全局\"按钮\nfunction addMoveToGlobalIcon($titleElem, areaKey, applyAllUIStates) {\n  // 只在局部正则脚本区域添加此按钮\n  if (areaKey !== \"scoped-regex\") return;\n  \n  console.log(`[FilterGroup] 尝试为局部正则脚本区域添加移动按钮...`);\n  console.log(`[FilterGroup] 标题元素:`, $titleElem);\n  console.log(`[FilterGroup] 标题元素数量:`, $titleElem.length);\n  \n  const moveIconId = `${areaKey}-move-to-global-icon`;\n  \n  // 检查按钮是否已存在\n  if ($(`#${moveIconId}`).length > 0) {\n    console.log(`[FilterGroup] 移动按钮已存在，跳过添加`);\n    return;\n  }\n  \n  if ($titleElem.length === 0) {\n    console.warn(`[FilterGroup] 未找到局部正则脚本的标题元素，无法添加移动按钮`);\n    \n    // 尝试备用选择器\n    const fallbackSelectors = [\n      \"#scoped_scripts_block .flex-container strong\",\n      \"#scoped_scripts_block strong\",\n      \"#scoped_scripts_block .flex-container\",\n      \"#scoped_scripts_block > div:first-child\"\n    ];\n    \n    for (const selector of fallbackSelectors) {\n      const $fallback = $(selector);\n      if ($fallback.length > 0) {\n        console.log(`[FilterGroup] 使用备用选择器找到元素: ${selector}`);\n        $fallback.append(\n          `<i id=\"${moveIconId}\" class=\"fa-solid fa-arrow-up\" style=\"${config_CONFIG.STYLES.iconStyle}\" title=\"将所有局部脚本移至全局\"></i>`\n        );\n        \n        addDebouncedClickHandler(\n          `#${moveIconId}`,\n          function () {\n            return handleMoveAllScopedToGlobal();\n          },\n          { operationName: `移动所有局部脚本到全局(${areaKey})` }\n        );\n        \n        console.log(`[FilterGroup] 移动按钮已通过备用选择器成功添加`);\n        return;\n      }\n    }\n    \n    console.error(`[FilterGroup] 所有选择器都未找到合适的元素，无法添加移动按钮`);\n    \n    // 最后的备用方案：在局部脚本列表上方创建一个操作栏\n    createMoveToGlobalActionBar();\n    return;\n  }\n  \n  \n  // 使用与其他图标按钮完全一致的样式（移除所有硬编码样式）\n  $titleElem.append(\n    `<i id=\"${moveIconId}\" class=\"fa-solid fa-arrow-up\" style=\"${config_CONFIG.STYLES.iconStyle}\" title=\"将所有局部脚本移至全局\"></i>`\n  );\n  \n  addDebouncedClickHandler(\n    `#${moveIconId}`,\n    function () {\n      return handleMoveAllScopedToGlobal();\n    },\n    { operationName: `移动所有局部脚本到全局(${areaKey})` }\n  );\n  \n  console.log(`[FilterGroup] 移动按钮已成功添加到局部正则脚本区域`);\n  console.log(`[FilterGroup] 按钮ID: ${moveIconId}`);\n}\n\n// 新增：创建独立的移动操作栏（备用方案）\nfunction createMoveToGlobalActionBar() {\n  console.log(`[FilterGroup] 创建独立的移动操作栏...`);\n  \n  const actionBarId = 'scoped-regex-move-action-bar';\n  \n  // 检查是否已存在\n  if ($(`#${actionBarId}`).length > 0) {\n    console.log(`[FilterGroup] 操作栏已存在，跳过创建`);\n    return;\n  }\n  \n  // 查找局部脚本列表容器\n  const $scopedList = $('#saved_scoped_scripts');\n  if ($scopedList.length === 0) {\n    console.error(`[FilterGroup] 未找到局部脚本列表容器，无法创建操作栏`);\n    return;\n  }\n  \n  // 创建操作栏HTML\n  const actionBarHtml = `\n    <div id=\"${actionBarId}\" style=\"\n      display: flex;\n      justify-content: flex-end;\n      align-items: center;\n      padding: 8px 12px;\n      margin-bottom: 8px;\n      background: var(--SmartThemeBorderColor, rgba(240, 240, 240, 0.1));\n      border: 1px solid var(--SmartThemeBorderColor, rgba(240, 240, 240, 0.2));\n      border-radius: 6px;\n      gap: 8px;\n    \">\n      <span style=\"\n        font-size: 13px;\n        color: var(--SmartThemeBodyColor, inherit);\n        opacity: 0.8;\n        margin-right: auto;\n      \">局部脚本操作：</span>\n      \n      <button id=\"scoped-regex-move-to-global-btn\" style=\"\n        display: flex;\n        align-items: center;\n        gap: 6px;\n        padding: 6px 12px;\n        background: var(--SmartThemeBlurTintColor, rgba(30, 30, 30, 0.9));\n        color: var(--SmartThemeBodyColor, inherit);\n        border: 1px solid var(--SmartThemeBorderColor, rgba(240, 240, 240, 0.3));\n        border-radius: 4px;\n        cursor: pointer;\n        font-size: 13px;\n        transition: all 0.2s ease;\n      \" title=\"将所有局部脚本移至全局脚本\">\n        <i class=\"fa-solid fa-arrow-up\" style=\"font-size: 12px;\"></i>\n        全部移至全局\n      </button>\n    </div>\n  `;\n  \n  // 在局部脚本列表前插入操作栏\n  $scopedList.before(actionBarHtml);\n  \n  // 添加与其他按钮一致的悬停效果\n  $(`#scoped-regex-move-to-global-btn`).hover(\n    function() {\n      $(this).css({\n        'background': 'var(--SmartThemeBorderColor, rgba(240, 240, 240, 0.2))',\n        'border-color': 'var(--SmartThemeUnderlineColor, rgba(52, 152, 219, 0.6))'\n      });\n    },\n    function() {\n      $(this).css({\n        'background': 'var(--SmartThemeBlurTintColor, rgba(30, 30, 30, 0.9))',\n        'border-color': 'var(--SmartThemeBorderColor, rgba(240, 240, 240, 0.3))'\n      });\n    }\n  );\n  \n  // 绑定点击事件\n  addDebouncedClickHandler(\n    `#scoped-regex-move-to-global-btn`,\n    function () {\n      return handleMoveAllScopedToGlobal();\n    },\n    { operationName: `移动所有局部脚本到全局(备用按钮)` }\n  );\n  \n  console.log(`[FilterGroup] 独立操作栏创建成功`);\n}\n// 新增：处理移动所有局部脚本到全局的主函数\nasync function handleMoveAllScopedToGlobal() {\n  const operationId = `move_scoped_to_global_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  \n  console.log(`[FilterGroup] [${operationId}] ======= 开始处理移动局部脚本到全局 =======`);\n  \n  try {\n    // 兼容性检查\n    if (!getTavernRegexes || typeof getTavernRegexes !== 'function') {\n      throw new Error(\"核心函数 getTavernRegexes 不可用\");\n    }\n    if (!replaceTavernRegexes || typeof replaceTavernRegexes !== 'function') {\n      throw new Error(\"核心函数 replaceTavernRegexes 不可用\");\n    }\n\n    console.log(`[FilterGroup] [${operationId}] 核心API兼容性检查通过`);\n\n    // 获取所有正则表达式数据\n    const allRegexes = getTavernRegexes();\n    console.log(`[FilterGroup] [${operationId}] 获取到 ${allRegexes.length} 个正则表达式数据`);\n    \n    // 【关键调试步骤】：打印完整数据结构\n    if (allRegexes.length > 0) {\n      console.log(`[FilterGroup] [${operationId}] 数据样例:`, allRegexes[0]);\n      console.log(`[FilterGroup] [${operationId}] 数据属性:`, Object.keys(allRegexes[0]));\n    }\n    \n    // 根据官方API文档，使用正确的属性来筛选局部脚本（scope: 'character'）\n    const scopedRegexes = allRegexes.filter(regex => regex.scope === 'character');\n    \n    // 【关键调试步骤】：打印我获取到的局部脚本变量\n    console.log(`[FilterGroup] [${operationId}] 局部脚本数据:`, scopedRegexes);\n    console.log(`[FilterGroup] [${operationId}] 找到 ${scopedRegexes.length} 个局部脚本`);\n    \n    if (scopedRegexes.length === 0) {\n      console.log(`[FilterGroup] [${operationId}] 没有可移动的局部脚本`);\n      showEmptyScopedScriptsDialog();\n      return false;\n    }\n\n    // 显示确认弹窗\n    const userConfirmed = await showMoveConfirmationDialog(scopedRegexes, operationId);\n    \n    if (!userConfirmed) {\n      console.log(`[FilterGroup] [${operationId}] 用户取消了操作`);\n      return false;\n    }\n\n    // 执行移动操作\n    console.log(`[FilterGroup] [${operationId}] 开始执行移动操作...`);\n    const success = await executeMoveOperation(scopedRegexes, allRegexes, operationId);\n    \n    if (success) {\n      console.log(`[FilterGroup] [${operationId}] 移动操作成功完成`);\n      \n      // 刷新UI\n      setTimeout(() => {\n        console.log(`[FilterGroup] [${operationId}] 开始刷新UI...`);\n        if (typeof applyAllUIStates === 'function') {\n          applyAllUIStates().then(() => {\n            console.log(`[FilterGroup] [${operationId}] UI刷新完成`);\n          }).catch(error => {\n            console.error(`[FilterGroup] [${operationId}] UI刷新失败:`, error);\n          });\n        }\n      }, 200);\n      \n      return true;\n    } else {\n      console.error(`[FilterGroup] [${operationId}] 移动操作失败`);\n      return false;\n    }\n\n  } catch (error) {\n    console.error(`[FilterGroup] [${operationId}] 处理移动操作时出错:`, error);\n    window.alert(`操作失败: ${error.message}\\n\\n操作ID: ${operationId}\\n详细信息请查看浏览器控制台`);\n    return false;\n  }\n}\n\n// 新增：显示空局部脚本提示\nfunction showEmptyScopedScriptsDialog() {\n  const modalHtml = `\n    <div id=\"empty-scoped-modal\" style=\"${config_CONFIG.STYLES.modalOverlayStyle}\">\n      <div class=\"modal-content\" style=\"${config_CONFIG.STYLES.modalContentStyle}\">\n        <div class=\"modal-header\" style=\"${config_CONFIG.STYLES.modalHeaderStyle}\">\n          <span>提示</span>\n          <i class=\"fa-solid fa-times modal-close\" style=\"cursor: pointer; font-size: 1.2em; padding: 8px; min-width: 44px; min-height: 44px; display: flex; align-items: center; justify-content: center;\" title=\"关闭\"></i>\n        </div>\n        <div class=\"modal-body\" style=\"${config_CONFIG.STYLES.modalBodyStyle}\">\n          <div style=\"text-align: center; padding: 20px;\">\n            <i class=\"fa-solid fa-info-circle\" style=\"font-size: 3em; color: var(--SmartThemeUnderlineColor, #4a9eff); margin-bottom: 16px;\"></i>\n            <p style=\"font-size: 16px; line-height: 1.5; margin-bottom: 0;\">当前没有可移动的局部脚本。</p>\n          </div>\n        </div>\n        <div class=\"modal-footer\" style=\"${config_CONFIG.STYLES.modalFooterStyle}\">\n          <button class=\"btn-confirm\" style=\"${config_CONFIG.STYLES.buttonStyle}${config_CONFIG.STYLES.primaryButtonStyle}\">\n            确定\n          </button>\n        </div>\n      </div>\n    </div>\n  `;\n\n  $('body').append(modalHtml);\n  const $modal = $('#empty-scoped-modal');\n  \n  // 绑定关闭事件\n  $modal.find('.modal-close, .btn-confirm').on('click', function() {\n    $modal.animate({ opacity: 0 }, 250, function() {\n      $modal.remove();\n    });\n  });\n  \n  // 点击遮罩关闭\n  $modal.on('click', function(e) {\n    if (e.target === this) {\n      $modal.animate({ opacity: 0 }, 250, function() {\n        $modal.remove();\n      });\n    }\n  });\n  \n  // ESC键关闭\n  $(document).on('keydown.emptyModal', function(e) {\n    if (e.keyCode === 27) {\n      $modal.animate({ opacity: 0 }, 250, function() {\n        $modal.remove();\n      });\n      $(document).off('keydown.emptyModal');\n    }\n  });\n  \n  $modal.css('opacity', '0').animate({ opacity: 1 }, 300);\n}\n\n// 新增：显示移动确认弹窗\nfunction showMoveConfirmationDialog(scopedRegexes, operationId) {\n  return new Promise((resolve) => {\n    console.log(`[FilterGroup] [${operationId}] 显示确认弹窗，包含 ${scopedRegexes.length} 个脚本`);\n    \n    const scriptListHtml = scopedRegexes.map(regex => {\n      const enabledText = regex.enabled ? '✅开启' : '❌关闭';\n      const statusColor = regex.enabled ? 'var(--SmartThemeUnderlineColor, #4a9eff)' : 'var(--SmartThemeBorderColor, #666)';\n      \n      return `<div style=\"padding: 8px 12px; margin: 4px 0; background: var(--SmartThemeBlurTintColor, rgba(40, 40, 40, 0.6)); border-radius: 4px; border-left: 3px solid ${statusColor};\">\n        <div style=\"display: flex; justify-content: space-between; align-items: center;\">\n          <span style=\"font-size: 14px; word-break: break-word; flex: 1;\">${regex.script_name || `未命名脚本 (ID: ${regex.id})`}</span>\n          <span style=\"font-size: 12px; margin-left: 8px; color: ${statusColor}; font-weight: bold;\">${enabledText}</span>\n        </div>\n      </div>`;\n    }).join('');\n    \n    const modalHtml = `\n      <div id=\"move-confirmation-modal\" style=\"${config_CONFIG.STYLES.modalOverlayStyle}\">\n        <div class=\"modal-content\" style=\"${config_CONFIG.STYLES.modalContentStyle}\">\n          <div class=\"modal-header\" style=\"${config_CONFIG.STYLES.modalHeaderStyle}\">\n            <span>确认移动脚本</span>\n            <i class=\"fa-solid fa-times modal-close\" style=\"cursor: pointer; font-size: 1.2em; padding: 8px; min-width: 44px; min-height: 44px; display: flex; align-items: center; justify-content: center;\" title=\"关闭\"></i>\n          </div>\n          <div class=\"modal-body\" style=\"${config_CONFIG.STYLES.modalBodyStyle}\">\n            <div style=\"margin-bottom: 20px;\">\n              <p style=\"font-size: 16px; line-height: 1.5; margin-bottom: 16px;\">\n                您确定要将以下所有局部脚本移动到全局脚本中吗？此操作会清空局部脚本列表。\n              </p>\n              <div style=\"font-weight: bold; margin-bottom: 12px; color: var(--SmartThemeUnderlineColor, #4a9eff);\">\n                将要移动的脚本 (共 ${scopedRegexes.length} 个)：\n              </div>\n              <div style=\"max-height: 300px; overflow-y: auto; border: 1px solid var(--SmartThemeBorderColor, rgba(240, 240, 240, 0.2)); border-radius: 6px; padding: 8px;\">\n                ${scriptListHtml}\n              </div>\n              <div style=\"margin-top: 12px; padding: 8px 12px; background: var(--SmartThemeBlurTintColor, rgba(40, 40, 40, 0.3)); border-radius: 4px; border: 1px solid var(--SmartThemeUnderlineColor, #4a9eff);\">\n                <span style=\"font-size: 13px; color: var(--SmartThemeUnderlineColor, #4a9eff);\">💡 提示：所有脚本的开关状态将会完整保留</span>\n              </div>\n            </div>\n          </div>\n          <div class=\"modal-footer\" style=\"${config_CONFIG.STYLES.modalFooterStyle}\">\n            <button class=\"btn-cancel\" style=\"${config_CONFIG.STYLES.buttonStyle}${config_CONFIG.STYLES.secondaryButtonStyle}\">\n              取消\n            </button>\n            <button class=\"btn-confirm\" style=\"${config_CONFIG.STYLES.buttonStyle}${config_CONFIG.STYLES.primaryButtonStyle}\">\n              确定移动\n            </button>\n          </div>\n        </div>\n      </div>\n    `;\n\n    $('body').append(modalHtml);\n    const $modal = $('#move-confirmation-modal');\n    \n    // 强制确保弹窗在最高层级显示\n    $modal.css('z-index', '999999');\n    \n    let resolved = false;\n    \n    function closeAndResolve(result) {\n      if (resolved) return;\n      resolved = true;\n      \n      console.log(`[FilterGroup] [${operationId}] 用户选择: ${result ? '确定' : '取消'}`);\n      \n      $modal.animate({ opacity: 0 }, 250, function() {\n        $modal.remove();\n        $(document).off('keydown.moveModal');\n        resolve(result);\n      });\n    }\n    \n    // 绑定事件\n    $modal.find('.btn-confirm').on('click', function(e) {\n      e.stopPropagation();\n      closeAndResolve(true);\n    });\n    \n    $modal.find('.modal-close, .btn-cancel').on('click', function(e) {\n      e.stopPropagation();\n      closeAndResolve(false);\n    });\n    \n    // 点击遮罩关闭\n    $modal.on('click', function(e) {\n      if (e.target === this) {\n        closeAndResolve(false);\n      }\n    });\n    \n    // ESC键关闭\n    $(document).on('keydown.moveModal', function(e) {\n      if (e.keyCode === 27) {\n        closeAndResolve(false);\n      }\n    });\n    \n    // 显示弹窗\n    $modal.css('opacity', '0').animate({ opacity: 1 }, 300);\n  });\n}\n\n// 新增：执行移动操作\nasync function executeMoveOperation(scopedRegexes, allRegexes, operationId) {\n  console.log(`[FilterGroup] [${operationId}] 开始执行移动操作...`);\n  \n  try {\n    let modifiedCount = 0;\n    const movedScripts = [];\n    \n    // 检查全局脚本中是否存在同名脚本 - 使用正确的属性名和判断方式\n    const globalRegexes = allRegexes.filter(regex => regex.scope === 'global');\n    const globalScriptNames = new Set(globalRegexes.map(regex => regex.script_name).filter(name => name));\n    \n    console.log(`[FilterGroup] [${operationId}] 当前全局脚本数量: ${globalRegexes.length}`);\n    console.log(`[FilterGroup] [${operationId}] 开始处理移动逻辑 (覆盖策略)...`);\n    \n    // 创建更新映射\n    const regexMap = new Map(allRegexes.map(regex => [regex.id, regex]));\n    \n    for (const scopedRegex of scopedRegexes) {\n      try {\n        const regex = regexMap.get(scopedRegex.id);\n        if (regex) {\n          // 检查是否存在同名的全局脚本\n          if (globalScriptNames.has(regex.script_name)) {\n            console.log(`[FilterGroup] [${operationId}] 发现同名全局脚本 \"${regex.script_name}\"，将执行覆盖`);\n            \n            // 查找并删除同名的全局脚本\n            const globalRegexIndex = allRegexes.findIndex(r => \n              r.scope === 'global' && r.script_name === regex.script_name\n            );\n            \n            if (globalRegexIndex !== -1) {\n              const removedGlobalRegex = allRegexes.splice(globalRegexIndex, 1)[0];\n              console.log(`[FilterGroup] [${operationId}] 已删除同名全局脚本: ID ${removedGlobalRegex.id}`);\n            }\n          }\n          \n          // 【关键】保存原始的开关状态，确保无损移动\n          const originalEnabled = regex.enabled;\n          console.log(`[FilterGroup] [${operationId}] 移动前状态检查 - 脚本: ${regex.script_name}, enabled: ${originalEnabled}`);\n          \n          // 将局部脚本转换为全局脚本 - 只修改 scope，保留所有其他属性\n          regex.scope = 'global';\n          \n          // 【关键】确保 enabled 状态被明确保留（虽然理论上应该自动保留，但明确设置确保万无一失）\n          regex.enabled = originalEnabled;\n          \n          // 验证状态保留\n          console.log(`[FilterGroup] [${operationId}] 移动后状态验证 - 脚本: ${regex.script_name}, enabled: ${regex.enabled}`);\n          \n          modifiedCount++;\n          \n          movedScripts.push({\n            id: regex.id,\n            name: regex.script_name || `未命名脚本 (ID: ${regex.id})`,\n            originalScope: 'character',\n            newScope: 'global',\n            enabledState: regex.enabled  // 添加状态信息到移动记录\n          });\n          \n          console.log(`[FilterGroup] [${operationId}] ✅ 已移动脚本: ${regex.script_name} (ID: ${regex.id}, enabled: ${regex.enabled})`);\n        }\n      } catch (error) {\n        console.error(`[FilterGroup] [${operationId}] 处理脚本 ${scopedRegex.id} 时出错:`, error);\n        // 继续处理其他脚本\n      }\n    }\n    \n    console.log(`[FilterGroup] [${operationId}] 移动处理完成，实际修改了 ${modifiedCount} 个脚本`);\n    \n    if (modifiedCount === 0) {\n      console.warn(`[FilterGroup] [${operationId}] 没有成功移动任何脚本`);\n      window.alert('移动操作失败，没有找到可移动的脚本。');\n      return false;\n    }\n    \n    // 保存更改到存储\n    console.log(`[FilterGroup] [${operationId}] 正在保存更改到存储...`);\n    await replaceTavernRegexes(allRegexes, {});\n    console.log(`[FilterGroup] [${operationId}] 存储更新完成`);\n    \n    // 操作完成报告\n    console.log(`[FilterGroup] [${operationId}] ======= 移动操作完成报告 =======`);\n    console.log(`[FilterGroup] [${operationId}] 成功移动: ${modifiedCount} 个脚本`);\n    console.log(`[FilterGroup] [${operationId}] 移动详情:`, movedScripts);\n    console.log(`[FilterGroup] [${operationId}] ================================`);\n    \n    // 显示成功提示\n    showMoveSuccessMessage(modifiedCount, movedScripts);\n    \n    // 触发移动完成事件\n    if (window.dispatchEvent) {\n      const eventDetail = {\n        operationId,\n        action: 'moveAllScopedToGlobal',\n        movedCount: modifiedCount,\n        movedScripts: movedScripts,\n        timestamp: new Date().toISOString()\n      };\n      \n      window.dispatchEvent(new CustomEvent('scopedScriptsMovedToGlobal', {\n        detail: eventDetail\n      }));\n      \n      console.log(`[FilterGroup] [${operationId}] 已触发移动完成事件`);\n    }\n    \n    return true;\n    \n  } catch (error) {\n    console.error(`[FilterGroup] [${operationId}] 执行移动操作时出错:`, error);\n    window.alert(`移动操作失败: ${error.message}\\n\\n操作ID: ${operationId}\\n详细信息请查看浏览器控制台`);\n    return false;\n  }\n}\n\n// 显示移动成功消息\nfunction showMoveSuccessMessage(movedCount, movedScripts) {\n  try {\n    if (!movedCount || movedCount === 0) {\n      return;\n    }\n    \n    // 构建成功消息\n    let message = `✅ 移动操作完成！\\n\\n`;\n    message += `成功将 ${movedCount} 个局部脚本移动到全局区域。\\n\\n`;\n    \n    // 添加移动的脚本名称列表（限制显示前5个）\n    if (movedScripts && movedScripts.length > 0) {\n      message += `移动的脚本详情:\\n`;\n      const displayScripts = movedScripts.slice(0, 5);\n      displayScripts.forEach((script, index) => {\n        const enabledText = script.enabledState ? '✅开启' : '❌关闭';\n        message += `${index + 1}. ${script.name} (${enabledText})\\n`;\n      });\n      \n      if (movedScripts.length > 5) {\n        message += `... 还有 ${movedScripts.length - 5} 个脚本\\n`;\n      }\n    }\n    \n    message += `\\n✨ 所有脚本的开关状态已完整保留！\\n`;\n    message += `📍 移动的脚本现在都可以在全局脚本区域找到。`;\n    \n    // 显示成功提示\n    if (window.alert) {\n      window.alert(message);\n    } else {\n      console.log(`[FilterGroup] 移动成功消息:`, message);\n    }\n    \n  } catch (error) {\n    console.error(`[FilterGroup] 显示成功消息时出错:`, error);\n    // 失败时显示简单消息\n    if (window.alert) {\n      window.alert(`✅ 成功移动 ${movedCount || 0} 个脚本到全局区域！`);\n    }\n  }\n}\n\nfunction addGroupHeaderClickHandler($groupHeader, areaKey) {\n  addDebouncedClickHandler(\n    $groupHeader,\n    function () {\n      const $header = $(this),\n        $icon = $header.find(\".group-toggle-icon\"),\n        $content = $header.next(\".script-group-content\"),\n        isExpanded = $icon.hasClass(\"fa-angle-up\"),\n        thisGroupName = $header.find(\"span\").text().split(\" (\")[0];\n      $icon.attr(\n        \"class\",\n        `fa-solid fa-angle-${isExpanded ? \"down\" : \"up\"} group-toggle-icon`\n      ),\n        $content[isExpanded ? \"hide\" : \"show\"](),\n        (function saveGroupFoldState(areaKey, groupName, isFolded) {\n          const storageKey = `script_group_fold_state_${areaKey}`,\n            foldStates = JSON.parse(localStorage.getItem(storageKey) || \"{}\");\n          (foldStates[groupName] = isFolded),\n            localStorage.setItem(storageKey, JSON.stringify(foldStates));\n        })(areaKey, thisGroupName, isExpanded);\n    },\n    { minDelay: 200, operationName: `切换分组(${areaKey})` }\n  );\n}\n// 优化后的批量操作函数，采用批量处理机制提升性能，并加强错误处理和日志记录\nasync function batchOperateRegexes($items, action, applyUIState) {\n  const operationId = `batch_${action}_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  \n  console.log(`[FilterGroup] 开始批量操作 [${operationId}]: ${action}`);\n  console.log(`[FilterGroup] 操作目标项目数量: ${$items.length}`);\n  \n  window.batchOperationInProgress = true;\n  const operationStartTime = performance.now();\n  \n  try {\n    // 严格的兼容性检查\n    if (!window.getTavernRegexes || typeof window.getTavernRegexes !== 'function') {\n      if (!getTavernRegexes || typeof getTavernRegexes !== 'function') {\n        const errorMsg = \"关键错误：核心函数 getTavernRegexes 完全不可用\";\n        console.error(`[FilterGroup] ${errorMsg}`);\n        throw new Error(errorMsg);\n      }\n    }\n    \n    if (!window.replaceTavernRegexes || typeof window.replaceTavernRegexes !== 'function') {\n      if (!replaceTavernRegexes || typeof replaceTavernRegexes !== 'function') {\n        const errorMsg = \"关键错误：核心函数 replaceTavernRegexes 完全不可用\";\n        console.error(`[FilterGroup] ${errorMsg}`);\n        throw new Error(errorMsg);\n      }\n    }\n\n    console.log(`[FilterGroup] [${operationId}] 核心API兼容性检查通过`);\n\n    // 性能优化：一次性获取所有数据，避免重复DOM查询\n    const allRegexes = getTavernRegexes();\n    console.log(`[FilterGroup] [${operationId}] 获取到 ${allRegexes.length} 个正则表达式数据`);\n    \n    if (!allRegexes || !Array.isArray(allRegexes)) {\n      throw new Error(\"获取的正则表达式数据格式无效\");\n    }\n    \n    const itemIdsToProcess = new Set();\n    \n    // 批量收集需要处理的ID，避免逐个DOM操作，并增加详细日志\n    const itemsArray = Array.from($items);\n    console.log(`[FilterGroup] [${operationId}] 开始收集目标项目ID...`);\n    \n    for (let i = 0; i < itemsArray.length; i++) {\n      const item = itemsArray[i];\n      const $item = $(item);\n      const itemId = $item.attr('id');\n      \n      if (itemId) {\n        itemIdsToProcess.add(itemId);\n        console.log(`[FilterGroup] [${operationId}] 收集ID [${i + 1}/${itemsArray.length}]: ${itemId}`);\n      } else {\n        console.warn(`[FilterGroup] [${operationId}] 项目 [${i + 1}/${itemsArray.length}] 缺少ID属性，跳过`);\n      }\n    }\n\n    if (itemIdsToProcess.size === 0) {\n      console.warn(`[FilterGroup] [${operationId}] 没有找到需要操作的有效正则表达式项目`);\n      window.alert(\"没有找到需要操作的项目，请检查选择。\");\n      return false;\n    }\n\n    console.log(`[FilterGroup] [${operationId}] 成功收集 ${itemIdsToProcess.size} 个有效ID`);\n    console.log(`[FilterGroup] [${operationId}] 目标ID列表:`, Array.from(itemIdsToProcess));\n\n    // 性能优化：批量状态变更，避免逐条处理\n    let modifiedCount = 0;\n    let operationDetails = [];\n    \n    if (action === \"enable\" || action === \"disable\") {\n      const shouldBeEnabled = action === \"enable\";\n      console.log(`[FilterGroup] [${operationId}] 执行批量${shouldBeEnabled ? '启用' : '禁用'}操作...`);\n      \n      // 使用 Map 进行快速查找，提升性能\n      const regexMap = new Map(allRegexes.map(regex => [regex.id, regex]));\n      console.log(`[FilterGroup] [${operationId}] 正则表达式映射表创建完成，包含 ${regexMap.size} 个条目`);\n      \n      for (const itemId of itemIdsToProcess) {\n        const regex = regexMap.get(itemId);\n        if (regex) {\n          const originalState = regex.enabled;\n          if (regex.enabled !== shouldBeEnabled) {\n            regex.enabled = shouldBeEnabled;\n            modifiedCount++;\n            operationDetails.push({\n              id: itemId,\n              name: regex.script_name || `ID-${itemId}`,\n              originalState,\n              newState: shouldBeEnabled\n            });\n            console.log(`[FilterGroup] [${operationId}] 修改项目 ${itemId}: ${originalState} -> ${shouldBeEnabled}`);\n          } else {\n            console.log(`[FilterGroup] [${operationId}] 项目 ${itemId} 状态已是目标状态，跳过`);\n          }\n        } else {\n          console.warn(`[FilterGroup] [${operationId}] 在数据中未找到ID为 ${itemId} 的正则表达式`);\n        }\n      }\n      \n      console.log(`[FilterGroup] [${operationId}] 批量${shouldBeEnabled ? '启用' : '禁用'}完成，修改了 ${modifiedCount} 个项目`);\n\n    } else if (action === \"delete\") {\n      console.log(`[FilterGroup] [${operationId}] 执行批量删除操作...`);\n      \n      const originalLength = allRegexes.length;\n      const itemsToDelete = allRegexes.filter(regex => itemIdsToProcess.has(regex.id));\n      \n      console.log(`[FilterGroup] [${operationId}] 找到 ${itemsToDelete.length} 个待删除项目`);\n      \n      // 记录删除详情\n      itemsToDelete.forEach(regex => {\n        operationDetails.push({\n          id: regex.id,\n          name: regex.script_name || `ID-${regex.id}`,\n          action: 'deleted'\n        });\n        console.log(`[FilterGroup] [${operationId}] 准备删除: ${regex.id} - ${regex.script_name || '未命名'}`);\n      });\n      \n      // 使用 filter 进行批量删除\n      const filteredRegexes = allRegexes.filter(regex => !itemIdsToProcess.has(regex.id));\n      modifiedCount = originalLength - filteredRegexes.length;\n      \n      console.log(`[FilterGroup] [${operationId}] 删除操作完成: 原有 ${originalLength} 个，删除 ${modifiedCount} 个，剩余 ${filteredRegexes.length} 个`);\n      \n      if (modifiedCount > 0) {\n        // 立即执行删除操作\n        console.log(`[FilterGroup] [${operationId}] 正在应用删除操作到存储...`);\n        await replaceTavernRegexes(filteredRegexes, {});\n        console.log(`[FilterGroup] [${operationId}] 删除操作已应用到存储`);\n      }\n    } else {\n      throw new Error(`未知的批量操作类型: ${action}`);\n    }\n\n    // 只有在实际修改了数据时才调用 replaceTavernRegexes（非删除操作）\n    if (modifiedCount > 0 && action !== \"delete\") {\n      console.log(`[FilterGroup] [${operationId}] 正在应用状态变更到存储...`);\n      await replaceTavernRegexes(allRegexes, {});\n      console.log(`[FilterGroup] [${operationId}] 状态变更已应用到存储`);\n    }\n\n    const operationDuration = performance.now() - operationStartTime;\n    \n    // 详细的操作报告\n    console.log(`[FilterGroup] [${operationId}] ======= 批量操作完成报告 =======`);\n    console.log(`[FilterGroup] [${operationId}] 操作类型: ${action}`);\n    console.log(`[FilterGroup] [${operationId}] 处理时间: ${operationDuration.toFixed(2)}ms`);\n    console.log(`[FilterGroup] [${operationId}] 目标项目: ${itemIdsToProcess.size} 个`);\n    console.log(`[FilterGroup] [${operationId}] 实际修改: ${modifiedCount} 个`);\n    console.log(`[FilterGroup] [${operationId}] 操作详情:`, operationDetails);\n    console.log(`[FilterGroup] [${operationId}] ================================`);\n\n    // 只在有实际修改时刷新UI\n    if (modifiedCount > 0) {\n      console.log(`[FilterGroup] [${operationId}] 准备刷新UI...`);\n      \n      // 使用 requestAnimationFrame 优化UI更新时机\n      requestAnimationFrame(() => {\n        setTimeout(() => {\n          console.log(`[FilterGroup] [${operationId}] 正在刷新UI...`);\n          \n          if (typeof applyAllUIStates === 'function') {\n            applyAllUIStates().then(() => {\n              console.log(`[FilterGroup] [${operationId}] UI刷新完成`);\n            }).catch(error => {\n              console.error(`[FilterGroup] [${operationId}] UI刷新失败:`, error);\n            });\n          } else {\n            console.warn(`[FilterGroup] [${operationId}] applyAllUIStates 函数不可用`);\n          }\n          \n          // 触发状态同步事件\n          if (window.dispatchEvent) {\n            const eventDetail = { \n              operationId,\n              action, \n              modifiedCount, \n              itemIds: Array.from(itemIdsToProcess),\n              operationDetails,\n              duration: operationDuration\n            };\n            \n            window.dispatchEvent(new CustomEvent('regexBatchOperationCompleted', {\n              detail: eventDetail\n            }));\n            \n            console.log(`[FilterGroup] [${operationId}] 已触发完成事件:`, eventDetail);\n          }\n        }, 150);\n      });\n    } else {\n      console.log(`[FilterGroup] [${operationId}] 没有实际修改，跳过UI刷新`);\n    }\n\n    return true;\n\n  } catch (error) {\n    const errorDetails = {\n      operationId,\n      action,\n      error: error.message,\n      stack: error.stack,\n      itemCount: $items.length,\n      timestamp: new Date().toISOString()\n    };\n    \n    console.error(`[FilterGroup] [${operationId}] ======= 批量操作失败报告 =======`);\n    console.error(`[FilterGroup] [${operationId}] 错误详情:`, errorDetails);\n    console.error(`[FilterGroup] [${operationId}] 完整错误对象:`, error);\n    console.error(`[FilterGroup] [${operationId}] ================================`);\n    \n    // 提供用户友好的错误提示\n    let userMessage = `批量${action}操作失败`;\n    if (error.message.includes('getTavernRegexes') || error.message.includes('replaceTavernRegexes')) {\n      userMessage += '：核心功能不可用，请刷新页面后重试';\n    } else if (error.message.includes('网络') || error.message.includes('network')) {\n      userMessage += '：网络错误，请检查连接后重试';\n    } else {\n      userMessage += `：${error.message}`;\n    }\n    \n    if (window.alert) {\n      window.alert(`${userMessage}\\n\\n操作ID: ${operationId}\\n详细信息请查看浏览器控制台`);\n    }\n    \n    return false;\n  } finally {\n    window.batchOperationInProgress = false;\n    console.log(`[FilterGroup] [${operationId}] 批量操作流程结束，已清理操作状态`);\n  }\n}\n\n// 新增：创建精细化管理模态窗口（彻底重构，确保完美居中显示）\nfunction createRegexManagementModal(groupName, $groupContent, areaKey) {\n  // 强制移除任何已存在的模态窗口\n  $('#regex-management-modal').remove();\n  $('#modal-responsive-styles').remove();\n\n  console.log(`[FilterGroup] 正在为分组 \"${groupName}\" 创建管理模态窗口...`);\n\n  // 修复BUG：不再依赖DOM可见性，直接从数据源获取规则\n  const groupRegexes = getRegexesByGroupName(groupName, areaKey);\n  \n  if (groupRegexes.length === 0) {\n    window.alert(`分组 \"${groupName}\" 内没有可管理的正则表达式。`);\n    return;\n  }\n\n  console.log(`[FilterGroup] 成功获取分组 \"${groupName}\" 的 ${groupRegexes.length} 个规则`);\n\n  // 创建模态窗口HTML（彻底重构响应式设计）\n  const modalHtml = `\n    <div id=\"regex-management-modal\" style=\"${config_CONFIG.STYLES.modalOverlayStyle}\">\n      <div class=\"modal-content\" style=\"${config_CONFIG.STYLES.modalContentStyle}\">\n        <div class=\"modal-header\" style=\"${config_CONFIG.STYLES.modalHeaderStyle}\">\n          <span>管理分组：${groupName}</span>\n          <i class=\"fa-solid fa-times modal-close\" style=\"cursor: pointer; font-size: clamp(1.2em, 4vw, 1.5em); padding: 8px; min-width: 44px; min-height: 44px; display: flex; align-items: center; justify-content: center; border-radius: 4px; transition: background-color 0.2s;\" title=\"关闭\"></i>\n        </div>\n        <div class=\"modal-body\" style=\"${config_CONFIG.STYLES.modalBodyStyle}\">\n          <div style=\"margin-bottom: 16px; padding: clamp(8px, 2vw, 16px); background: var(--SmartThemeBorderColor, rgba(240, 240, 240, 0.1)); border-radius: clamp(4px, 1vw, 8px); border: 1px solid var(--SmartThemeBorderColor, rgba(240, 240, 240, 0.15));\">\n            <div id=\"selection-stats\" style=\"font-size: clamp(13px, 3vw, 15px); color: var(--SmartThemeBodyColor, inherit); text-align: center; font-weight: 500;\">\n              已选择: <span id=\"selected-count\" style=\"color: var(--SmartThemeUnderlineColor, #4a9eff); font-weight: bold;\">${groupRegexes.filter(r => r.enabled).length}</span> / <span id=\"total-count\" style=\"font-weight: bold;\">${groupRegexes.length}</span> 个规则\n            </div>\n          </div>\n          <div class=\"regex-list\" id=\"regex-management-list\">\n            ${groupRegexes.map(item => `\n              <div class=\"regex-item\" data-regex-id=\"${item.id}\" style=\"${config_CONFIG.STYLES.regexItemStyle}\">\n                <label style=\"display: flex; align-items: center; width: 100%; cursor: pointer; padding: 4px 0;\">\n                  <input type=\"checkbox\" ${item.enabled ? 'checked' : ''} \n                         style=\"margin-right: clamp(12px, 3vw, 16px); transform: scale(clamp(1.2, 3vw, 1.6)); flex-shrink: 0;\" \n                         data-original-state=\"${item.enabled}\" />\n                  <span style=\"flex: 1; font-size: clamp(13px, 3vw, 15px); word-break: break-word; line-height: 1.4; color: var(--SmartThemeBodyColor, inherit);\">${item.name}</span>\n                </label>\n              </div>\n            `).join('')}\n          </div>\n          <div style=\"margin-top: clamp(12px, 3vw, 20px); padding-top: clamp(12px, 3vw, 16px); border-top: 1px solid var(--SmartThemeBorderColor, rgba(240, 240, 240, 0.2));\">\n            <div style=\"display: flex; gap: clamp(6px, 2vw, 12px); justify-content: center; flex-wrap: wrap;\">\n              <button class=\"batch-select-all\" style=\"${config_CONFIG.STYLES.buttonStyle}${config_CONFIG.STYLES.secondaryButtonStyle}\">\n                全选\n              </button>\n              <button class=\"batch-select-none\" style=\"${config_CONFIG.STYLES.buttonStyle}${config_CONFIG.STYLES.secondaryButtonStyle}\">\n                全不选\n              </button>\n              <button class=\"batch-invert\" style=\"${config_CONFIG.STYLES.buttonStyle}${config_CONFIG.STYLES.secondaryButtonStyle}\">\n                反选\n              </button>\n            </div>\n          </div>\n        </div>\n        <div class=\"modal-footer\" style=\"${config_CONFIG.STYLES.modalFooterStyle}\">\n          <button class=\"btn-cancel\" style=\"${config_CONFIG.STYLES.buttonStyle}${config_CONFIG.STYLES.secondaryButtonStyle}\">\n            取消\n          </button>\n          <button class=\"btn-confirm\" style=\"${config_CONFIG.STYLES.buttonStyle}${config_CONFIG.STYLES.primaryButtonStyle}\">\n            确定\n          </button>\n        </div>\n      </div>\n    </div>\n  `;\n\n  // 关键修复：强制插入到body的最顶层，确保不受父容器影响\n  $('body').append(modalHtml);\n  const $modal = $('#regex-management-modal');\n  \n  // 强制确保弹窗在最高层级显示\n  $modal.css({\n    'z-index': '999999',\n    'position': 'fixed',\n    'top': '0',\n    'left': '0',\n    'width': '100vw',\n    'height': '100vh'\n  });\n\n  // 添加完善的响应式样式\n  addComprehensiveResponsiveStyles($modal);\n\n  console.log('[FilterGroup] 模态窗口已创建并添加到DOM，正在绑定事件...');\n\n  // 添加悬停效果和触摸反馈\n  addInteractionEffects($modal);\n\n  // 添加复选框变化事件监听，实时更新统计\n  $modal.find('input[type=\"checkbox\"]').on('change', function() {\n    updateSelectionStats($modal);\n  });\n\n  // 绑定事件处理器\n  bindModalEvents($modal, groupRegexes, areaKey, groupName);\n  \n  // 显示模态窗口（添加淡入效果）\n  $modal.css('opacity', '0').animate({ opacity: 1 }, 300);\n  \n  console.log('[FilterGroup] 模态窗口创建完成并已显示');\n}\n\n// 新增：添加全面的响应式样式（彻底重构移动端优化）\nfunction addComprehensiveResponsiveStyles($modal) {\n  // 强制移除旧样式\n  $('#modal-responsive-styles').remove();\n  \n  // 检测设备类型\n  const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) || window.innerWidth <= 768;\n  const isTablet = window.innerWidth > 768 && window.innerWidth <= 1024;\n  \n  console.log(`[FilterGroup] 设备检测: ${isMobile ? '移动设备' : isTablet ? '平板设备' : '桌面设备'}, 屏幕宽度: ${window.innerWidth}px`);\n  \n  // 创建完全重构的响应式CSS\n  const comprehensiveCSS = `\n    <style id=\"modal-responsive-styles\">\n      /* 基础样式重置 - 确保弹窗完全脱离父容器影响 */\n      #regex-management-modal {\n        position: fixed !important;\n        top: 0 !important;\n        left: 0 !important;\n        width: 100vw !important;\n        height: 100vh !important;\n        z-index: 999999 !important;\n        display: flex !important;\n        justify-content: center !important;\n        align-items: center !important;\n        padding: 0 !important;\n        margin: 0 !important;\n        box-sizing: border-box !important;\n        background: rgba(0, 0, 0, 0.65) !important;\n        backdrop-filter: blur(2px);\n        -webkit-backdrop-filter: blur(2px);\n      }\n      \n      #regex-management-modal .modal-content {\n        position: relative !important;\n        margin: 0 !important;\n        transform: none !important;\n        max-width: min(580px, 92vw) !important;\n        max-height: min(85vh, calc(100vh - 40px)) !important;\n        width: auto !important;\n        height: auto !important;\n        overflow: hidden !important;\n        border-radius: 12px !important;\n        box-shadow: 0 12px 40px rgba(0, 0, 0, 0.5) !important;\n      }\n      \n      /* 确保头部、身体、底部的布局稳定 */\n      #regex-management-modal .modal-header {\n        flex-shrink: 0 !important;\n        border-radius: 12px 12px 0 0 !important;\n      }\n      \n      #regex-management-modal .modal-body {\n        flex: 1 !important;\n        min-height: 200px !important;\n        overflow-y: auto !important;\n        overflow-x: hidden !important;\n        -webkit-overflow-scrolling: touch !important;\n      }\n      \n      #regex-management-modal .modal-footer {\n        flex-shrink: 0 !important;\n        border-radius: 0 0 12px 12px !important;\n      }\n      \n      /* 平板设备优化 (768px - 1024px) */\n      @media (min-width: 768px) and (max-width: 1024px) {\n        #regex-management-modal .modal-content {\n          max-width: min(520px, 88vw) !important;\n          max-height: min(82vh, calc(100vh - 60px)) !important;\n        }\n        \n        #regex-management-modal .modal-header {\n          padding: 16px 20px !important;\n          font-size: 1.15em !important;\n        }\n        \n        #regex-management-modal .modal-body {\n          padding: 18px 20px !important;\n        }\n        \n        #regex-management-modal .modal-footer {\n          padding: 14px 20px !important;\n        }\n        \n        #regex-management-modal button {\n          min-height: 46px !important;\n          padding: 12px 18px !important;\n          font-size: 15px !important;\n        }\n      }\n      \n      /* 移动设备优化 (≤ 768px) */\n      @media (max-width: 768px) {\n        #regex-management-modal {\n          padding: 8px !important;\n          align-items: flex-start !important;\n          padding-top: max(20px, env(safe-area-inset-top, 20px)) !important;\n        }\n        \n        #regex-management-modal .modal-content {\n          max-width: calc(100vw - 16px) !important;\n          max-height: calc(100vh - 40px - env(safe-area-inset-top, 0px) - env(safe-area-inset-bottom, 0px)) !important;\n          margin-top: 0 !important;\n          border-radius: 16px !important;\n        }\n        \n        #regex-management-modal .modal-header {\n          padding: 16px 18px !important;\n          font-size: 1.1em !important;\n          border-radius: 16px 16px 0 0 !important;\n        }\n        \n        #regex-management-modal .modal-body {\n          padding: 16px 18px !important;\n          min-height: 180px !important;\n        }\n        \n        #regex-management-modal .modal-footer {\n          padding: 14px 18px !important;\n          gap: 10px !important;\n          border-radius: 0 0 16px 16px !important;\n        }\n        \n        #regex-management-modal .regex-item {\n          padding: 14px 12px !important;\n          margin: 8px 0 !important;\n          min-height: 56px !important;\n          border-radius: 8px !important;\n        }\n        \n        #regex-management-modal input[type=\"checkbox\"] {\n          transform: scale(1.4) !important;\n          margin-right: 14px !important;\n        }\n        \n        #regex-management-modal button {\n          min-height: 48px !important;\n          padding: 14px 16px !important;\n          font-size: 16px !important;\n          flex: 1 !important;\n          border-radius: 8px !important;\n        }\n        \n        #regex-management-modal .modal-close {\n          font-size: 1.4em !important;\n          padding: 10px !important;\n          min-width: 48px !important;\n          min-height: 48px !important;\n          border-radius: 8px !important;\n        }\n        \n        #regex-management-modal .modal-close:hover {\n          background: rgba(255, 255, 255, 0.1) !important;\n        }\n      }\n      \n      /* 小屏幕移动设备优化 (≤ 480px) */\n      @media (max-width: 480px) {\n        #regex-management-modal {\n          padding: 4px !important;\n          padding-top: max(16px, env(safe-area-inset-top, 16px)) !important;\n        }\n        \n        #regex-management-modal .modal-content {\n          max-width: calc(100vw - 8px) !important;\n          max-height: calc(100vh - 32px - env(safe-area-inset-top, 0px) - env(safe-area-inset-bottom, 0px)) !important;\n          border-radius: 20px !important;\n        }\n        \n        #regex-management-modal .modal-header {\n          padding: 18px 16px !important;\n          font-size: 1.05em !important;\n          border-radius: 20px 20px 0 0 !important;\n        }\n        \n        #regex-management-modal .modal-body {\n          padding: 16px !important;\n        }\n        \n        #regex-management-modal .modal-footer {\n          padding: 16px !important;\n          flex-direction: column !important;\n          border-radius: 0 0 20px 20px !important;\n        }\n        \n        #regex-management-modal .modal-footer button {\n          width: 100% !important;\n          max-width: none !important;\n          margin: 0 !important;\n        }\n        \n        #regex-management-modal .regex-item {\n          padding: 16px 14px !important;\n          min-height: 60px !important;\n          border-radius: 10px !important;\n        }\n        \n        #regex-management-modal span {\n          font-size: 15px !important;\n          line-height: 1.4 !important;\n        }\n      }\n      \n      /* 超小屏幕设备优化 (≤ 360px) */\n      @media (max-width: 360px) {\n        #regex-management-modal .modal-header {\n          font-size: 1em !important;\n          padding: 16px 14px !important;\n        }\n        \n        #regex-management-modal .modal-body {\n          padding: 14px !important;\n        }\n        \n        #regex-management-modal .modal-footer {\n          padding: 14px !important;\n        }\n        \n        #regex-management-modal .regex-item {\n          padding: 14px 12px !important;\n          min-height: 56px !important;\n        }\n        \n        #regex-management-modal button {\n          font-size: 15px !important;\n          padding: 12px 14px !important;\n        }\n      }\n      \n      /* 横屏移动设备特殊处理 */\n      @media (max-width: 768px) and (orientation: landscape) {\n        #regex-management-modal {\n          align-items: center !important;\n          padding: 6px !important;\n        }\n        \n        #regex-management-modal .modal-content {\n          max-height: calc(100vh - 12px) !important;\n        }\n        \n        #regex-management-modal .modal-body {\n          min-height: 140px !important;\n        }\n      }\n      \n      /* 触摸设备特殊优化 */\n      @media (hover: none) and (pointer: coarse) {\n        #regex-management-modal .regex-item:active {\n          background: var(--SmartThemeBorderColor, rgba(80, 80, 80, 0.9)) !important;\n          transform: scale(0.98) !important;\n        }\n        \n        #regex-management-modal button:active {\n          transform: scale(0.96) !important;\n        }\n        \n        #regex-management-modal .modal-close:active {\n          background: rgba(255, 255, 255, 0.15) !important;\n          transform: scale(0.94) !important;\n        }\n      }\n    </style>\n  `;\n  \n  // 添加CSS到页面\n  $('head').append(comprehensiveCSS);\n  \n  console.log('[FilterGroup] 已应用全面的响应式样式');\n}\n\n// 新增：添加交互效果（替代原来的移动端优化函数）\nfunction addInteractionEffects($modal) {\n  // 检测设备类型\n  const isTouchDevice = 'ontouchstart' in window || navigator.maxTouchPoints > 0;\n  \n  console.log(`[FilterGroup] 设备类型: ${isTouchDevice ? '触摸设备' : '非触摸设备'}`);\n  \n  // 为规则项添加悬停/触摸效果\n  $modal.find('.regex-item').each(function() {\n    const $item = $(this);\n    \n    if (isTouchDevice) {\n      // 触摸设备：使用触摸事件\n      $item.on('touchstart', function(e) {\n        $(this).css({\n          'background': 'var(--SmartThemeBorderColor, rgba(80, 80, 80, 0.9))',\n          'transform': 'scale(0.98)',\n          'transition': 'all 0.15s ease'\n        });\n      }).on('touchend touchcancel', function() {\n        const $this = $(this);\n        setTimeout(() => {\n          $this.css({\n            'background': 'var(--SmartThemeBlurTintColor, rgba(40, 40, 40, 0.8))',\n            'transform': 'scale(1)',\n            'transition': 'all 0.2s ease'\n          });\n        }, 120);\n      });\n    } else {\n      // 非触摸设备：使用鼠标悬停\n      $item.hover(\n        function() {\n          $(this).css({\n            'background': 'var(--SmartThemeBorderColor, rgba(60, 60, 60, 0.8))',\n            'transform': 'translateY(-1px)',\n            'transition': 'all 0.2s ease'\n          });\n        },\n        function() {\n          $(this).css({\n            'background': 'var(--SmartThemeBlurTintColor, rgba(40, 40, 40, 0.8))',\n            'transform': 'translateY(0)',\n            'transition': 'all 0.2s ease'\n          });\n        }\n      );\n    }\n  });\n  \n  // 为关闭按钮添加悬停效果\n  $modal.find('.modal-close').hover(\n    function() {\n      $(this).css('background', 'rgba(255, 255, 255, 0.1)');\n    },\n    function() {\n      $(this).css('background', 'transparent');\n    }\n  );\n  \n  // 为按钮添加点击反馈\n  $modal.find('button').on('mousedown touchstart', function() {\n    $(this).css('transform', 'scale(0.96)');\n  }).on('mouseup mouseleave touchend', function() {\n    $(this).css('transform', 'scale(1)');\n  });\n}\n\n// 新增：专门的批量删除函数（解决折叠状态BUG，优化性能）\nasync function batchDeleteRegexesByGroup(groupName, areaKey, $groupHeader) {\n  const operationId = `batch_delete_group_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  \n  console.log(`[FilterGroup] [${operationId}] ======= 开始批量删除分组 =======`);\n  console.log(`[FilterGroup] [${operationId}] 目标分组: \"${groupName}\"`);\n  console.log(`[FilterGroup] [${operationId}] 区域: ${areaKey}`);\n  \n  // 立即添加视觉反馈 - 显示加载状态\n  const $loadingIndicator = addLoadingState($groupHeader, operationId, \"正在删除...\");\n  \n  window.batchOperationInProgress = true;\n  const operationStartTime = performance.now();\n  \n  try {\n    // 严格的兼容性检查\n    if (!getTavernRegexes || typeof getTavernRegexes !== 'function') {\n      throw new Error(\"核心函数 getTavernRegexes 不可用\");\n    }\n    if (!replaceTavernRegexes || typeof replaceTavernRegexes !== 'function') {\n      throw new Error(\"核心函数 replaceTavernRegexes 不可用\");\n    }\n\n    console.log(`[FilterGroup] [${operationId}] 核心API兼容性检查通过`);\n\n    // 第一步：统一收集 - 直接从数据源获取分组下的所有规则\n    console.log(`[FilterGroup] [${operationId}] 正在从数据源收集分组规则...`);\n    const groupRegexes = getRegexesByGroupName(groupName, areaKey);\n    \n    if (groupRegexes.length === 0) {\n      console.warn(`[FilterGroup] [${operationId}] 分组 \"${groupName}\" 内没有可删除的规则`);\n      window.alert(`分组 \"${groupName}\" 内没有可删除的正则表达式。`);\n      return false;\n    }\n\n    // 提取所有规则ID\n    const regexIdsToDelete = groupRegexes.map(regex => regex.id);\n    const regexNamesToDelete = groupRegexes.map(regex => regex.name);\n    \n    console.log(`[FilterGroup] [${operationId}] 收集完成:`);\n    console.log(`[FilterGroup] [${operationId}] - 规则数量: ${regexIdsToDelete.length}`);\n    console.log(`[FilterGroup] [${operationId}] - 规则ID列表:`, regexIdsToDelete);\n    console.log(`[FilterGroup] [${operationId}] - 规则名称:`, regexNamesToDelete);\n\n    // 第二步：单次数据操作 - 批量删除\n    console.log(`[FilterGroup] [${operationId}] 正在执行批量数据删除...`);\n    \n    const allRegexes = getTavernRegexes();\n    const originalCount = allRegexes.length;\n    \n    console.log(`[FilterGroup] [${operationId}] 删除前总规则数: ${originalCount}`);\n    \n    // 创建删除ID的Set以提高查找性能\n    const deleteIdSet = new Set(regexIdsToDelete);\n    \n    // 一次性过滤删除所有目标规则\n    const filteredRegexes = allRegexes.filter(regex => !deleteIdSet.has(regex.id));\n    const actualDeletedCount = originalCount - filteredRegexes.length;\n    \n    console.log(`[FilterGroup] [${operationId}] 删除后总规则数: ${filteredRegexes.length}`);\n    console.log(`[FilterGroup] [${operationId}] 实际删除数量: ${actualDeletedCount}`);\n    \n    if (actualDeletedCount === 0) {\n      console.warn(`[FilterGroup] [${operationId}] 没有找到匹配的规则进行删除`);\n      window.alert(`没有找到需要删除的规则，可能已被其他操作删除。`);\n      return false;\n    }\n    \n    // 单次写回操作\n    console.log(`[FilterGroup] [${operationId}] 正在应用删除到存储...`);\n    await replaceTavernRegexes(filteredRegexes, {});\n    console.log(`[FilterGroup] [${operationId}] 存储更新完成`);\n\n    const operationDuration = performance.now() - operationStartTime;\n    \n    // 操作完成报告\n    console.log(`[FilterGroup] [${operationId}] ======= 批量删除完成报告 =======`);\n    console.log(`[FilterGroup] [${operationId}] 分组名称: ${groupName}`);\n    console.log(`[FilterGroup] [${operationId}] 删除耗时: ${operationDuration.toFixed(2)}ms`);\n    console.log(`[FilterGroup] [${operationId}] 预期删除: ${regexIdsToDelete.length} 个`);\n    console.log(`[FilterGroup] [${operationId}] 实际删除: ${actualDeletedCount} 个`);\n    console.log(`[FilterGroup] [${operationId}] 删除规则详情:`, regexNamesToDelete);\n    console.log(`[FilterGroup] [${operationId}] ================================`);\n\n    // 第三步：单次UI更新 - 立即移除整个分组DOM\n    console.log(`[FilterGroup] [${operationId}] 正在执行UI更新...`);\n    \n    // 使用动画效果优雅地移除分组\n    await removeGroupWithAnimation($groupHeader, operationId);\n    \n    // 触发全局状态更新事件\n    if (window.dispatchEvent) {\n      const eventDetail = {\n        operationId,\n        action: 'batchDeleteGroup',\n        groupName,\n        areaKey,\n        deletedCount: actualDeletedCount,\n        deletedIds: regexIdsToDelete,\n        deletedNames: regexNamesToDelete,\n        duration: operationDuration\n      };\n      \n      window.dispatchEvent(new CustomEvent('regexGroupBatchDeleted', {\n        detail: eventDetail\n      }));\n      \n      console.log(`[FilterGroup] [${operationId}] 已触发分组删除完成事件`);\n    }\n\n    // 延迟刷新整体UI，确保数据同步\n    setTimeout(() => {\n      console.log(`[FilterGroup] [${operationId}] 开始全局UI刷新...`);\n      if (typeof applyAllUIStates === 'function') {\n        applyAllUIStates().then(() => {\n          console.log(`[FilterGroup] [${operationId}] 全局UI刷新完成`);\n        }).catch(error => {\n          console.error(`[FilterGroup] [${operationId}] 全局UI刷新失败:`, error);\n        });\n      }\n    }, 300);\n\n    return true;\n\n  } catch (error) {\n    const errorDetails = {\n      operationId,\n      groupName,\n      areaKey,\n      error: error.message,\n      stack: error.stack,\n      timestamp: new Date().toISOString()\n    };\n    \n    console.error(`[FilterGroup] [${operationId}] ======= 批量删除失败报告 =======`);\n    console.error(`[FilterGroup] [${operationId}] 错误详情:`, errorDetails);\n    console.error(`[FilterGroup] [${operationId}] 完整错误对象:`, error);\n    console.error(`[FilterGroup] [${operationId}] ================================`);\n    \n    // 移除加载状态\n    removeLoadingState($loadingIndicator, operationId);\n    \n    // 用户友好的错误提示\n    let userMessage = `批量删除分组\"${groupName}\"失败`;\n    if (error.message.includes('getTavernRegexes') || error.message.includes('replaceTavernRegexes')) {\n      userMessage += '：核心功能不可用，请刷新页面后重试';\n    } else if (error.message.includes('网络') || error.message.includes('network')) {\n      userMessage += '：网络错误，请检查连接后重试';\n    } else {\n      userMessage += `：${error.message}`;\n    }\n    \n    window.alert(`${userMessage}\\n\\n操作ID: ${operationId}\\n详细信息请查看浏览器控制台`);\n    \n    return false;\n  } finally {\n    window.batchOperationInProgress = false;\n    console.log(`[FilterGroup] [${operationId}] 批量删除流程结束`);\n  }\n}\n\n// 新增：添加加载状态指示器（支持自定义文案）\nfunction addLoadingState($groupHeader, operationId, message = \"正在处理...\") {\n  console.log(`[FilterGroup] [${operationId}] 添加加载状态指示器: ${message}`);\n  \n  // 创建加载指示器\n  const $loadingIndicator = $(`\n    <div class=\"group-loading-indicator\" style=\"\n      position: absolute;\n      top: 0;\n      left: 0;\n      right: 0;\n      bottom: 0;\n      background: rgba(0, 0, 0, 0.7);\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      border-radius: 4px;\n      z-index: 1000;\n      color: white;\n      font-size: 0.9em;\n    \">\n      <i class=\"fa-solid fa-spinner fa-spin\" style=\"margin-right: 8px;\"></i>\n      ${message}\n    </div>\n  `);\n  \n  // 设置分组头为相对定位，以便加载指示器正确覆盖\n  $groupHeader.css('position', 'relative');\n  \n  // 添加加载指示器\n  $groupHeader.append($loadingIndicator);\n  \n  // 禁用分组头的所有交互\n  $groupHeader.css('pointer-events', 'none');\n  \n  console.log(`[FilterGroup] [${operationId}] 加载状态指示器已添加`);\n  \n  return $loadingIndicator;\n}\n\n// 新增：移除加载状态\nfunction removeLoadingState($loadingIndicator, operationId) {\n  console.log(`[FilterGroup] [${operationId}] 移除加载状态指示器...`);\n  \n  if ($loadingIndicator && $loadingIndicator.length > 0) {\n    $loadingIndicator.remove();\n  }\n  \n  // 恢复分组头的交互能力\n  $('.script-group-header').css('pointer-events', 'auto');\n  \n  console.log(`[FilterGroup] [${operationId}] 加载状态指示器已移除`);\n}\n\n// 新增：优雅地移除分组（带动画效果）\nasync function removeGroupWithAnimation($groupHeader, operationId) {\n  console.log(`[FilterGroup] [${operationId}] 开始执行分组移除动画...`);\n  \n  try {\n    const $groupContent = $groupHeader.next('.script-group-content');\n    const $groupElements = $groupHeader.add($groupContent);\n    \n    // 添加淡出动画\n    $groupElements.animate({\n      opacity: 0,\n      height: 0,\n      marginTop: 0,\n      marginBottom: 0,\n      paddingTop: 0,\n      paddingBottom: 0\n    }, {\n      duration: 400,\n      easing: 'ease-out',\n      complete: function() {\n        console.log(`[FilterGroup] [${operationId}] 分组DOM移除动画完成，正在移除元素...`);\n        $groupElements.remove();\n        console.log(`[FilterGroup] [${operationId}] 分组DOM已完全移除`);\n      }\n    });\n    \n    // 等待动画完成\n    await new Promise(resolve => setTimeout(resolve, 450));\n    \n  } catch (error) {\n    console.error(`[FilterGroup] [${operationId}] 分组移除动画失败:`, error);\n    // 强制移除\n    $groupHeader.add($groupHeader.next('.script-group-content')).remove();\n  }\n}\n\n// 新增：批量更新分组规则状态（启用/禁用）- 解决折叠状态BUG，优化性能\nasync function batchUpdateRegexStateByGroup(groupName, areaKey, enableState, $groupHeader) {\n  const operationId = `batch_${enableState ? 'enable' : 'disable'}_group_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  const actionName = enableState ? '启用' : '禁用';\n  \n  console.log(`[FilterGroup] [${operationId}] ======= 开始批量${actionName}分组 =======`);\n  console.log(`[FilterGroup] [${operationId}] 目标分组: \"${groupName}\"`);\n  console.log(`[FilterGroup] [${operationId}] 区域: ${areaKey}`);\n  console.log(`[FilterGroup] [${operationId}] 目标状态: ${enableState ? '启用' : '禁用'}`);\n  \n  // 立即添加视觉反馈\n  const actionMessage = enableState ? \"正在开启...\" : \"正在关闭...\";\n  const $loadingIndicator = addLoadingState($groupHeader, operationId, actionMessage);\n  \n  window.batchOperationInProgress = true;\n  const operationStartTime = performance.now();\n  \n  try {\n    // 兼容性检查\n    if (!getTavernRegexes || typeof getTavernRegexes !== 'function') {\n      throw new Error(\"核心函数 getTavernRegexes 不可用\");\n    }\n    if (!replaceTavernRegexes || typeof replaceTavernRegexes !== 'function') {\n      throw new Error(\"核心函数 replaceTavernRegexes 不可用\");\n    }\n\n    console.log(`[FilterGroup] [${operationId}] 核心API兼容性检查通过`);\n\n    // 第一步：统一收集 - 直接从数据源获取分组规则\n    console.log(`[FilterGroup] [${operationId}] 正在从数据源收集分组规则...`);\n    const groupRegexes = getRegexesByGroupName(groupName, areaKey);\n    \n    if (groupRegexes.length === 0) {\n      console.warn(`[FilterGroup] [${operationId}] 分组 \"${groupName}\" 内没有可${actionName}的规则`);\n      window.alert(`分组 \"${groupName}\" 内没有可${actionName}的正则表达式。`);\n      return false;\n    }\n\n    // 筛选需要更新状态的规则\n    const regexesToUpdate = groupRegexes.filter(regex => regex.enabled !== enableState);\n    \n    if (regexesToUpdate.length === 0) {\n      console.log(`[FilterGroup] [${operationId}] 分组内所有规则已经是目标状态，无需更新`);\n      window.alert(`分组 \"${groupName}\" 内的所有规则已经是${actionName}状态。`);\n      return false;\n    }\n\n    const regexIdsToUpdate = regexesToUpdate.map(regex => regex.id);\n    const regexNamesToUpdate = regexesToUpdate.map(regex => regex.name);\n    \n    console.log(`[FilterGroup] [${operationId}] 收集完成:`);\n    console.log(`[FilterGroup] [${operationId}] - 总规则数量: ${groupRegexes.length}`);\n    console.log(`[FilterGroup] [${operationId}] - 需要更新数量: ${regexesToUpdate.length}`);\n    console.log(`[FilterGroup] [${operationId}] - 更新规则ID列表:`, regexIdsToUpdate);\n\n    // 第二步：单次数据操作 - 批量状态更新\n    console.log(`[FilterGroup] [${operationId}] 正在执行批量状态更新...`);\n    \n    const allRegexes = getTavernRegexes();\n    console.log(`[FilterGroup] [${operationId}] 获取到 ${allRegexes.length} 个总规则`);\n    \n    // 创建更新ID的Set以提高查找性能\n    const updateIdSet = new Set(regexIdsToUpdate);\n    \n    // 批量更新状态\n    let actualUpdatedCount = 0;\n    allRegexes.forEach(regex => {\n      if (updateIdSet.has(regex.id)) {\n        regex.enabled = enableState;\n        actualUpdatedCount++;\n      }\n    });\n    \n    console.log(`[FilterGroup] [${operationId}] 实际更新数量: ${actualUpdatedCount}`);\n    \n    if (actualUpdatedCount === 0) {\n      console.warn(`[FilterGroup] [${operationId}] 没有找到匹配的规则进行状态更新`);\n      window.alert(`没有找到需要${actionName}的规则，可能已被其他操作修改。`);\n      return false;\n    }\n    \n    // 单次写回操作\n    console.log(`[FilterGroup] [${operationId}] 正在应用状态更新到存储...`);\n    await replaceTavernRegexes(allRegexes, {});\n    console.log(`[FilterGroup] [${operationId}] 存储更新完成`);\n\n    const operationDuration = performance.now() - operationStartTime;\n    \n    // 操作完成报告\n    console.log(`[FilterGroup] [${operationId}] ======= 批量${actionName}完成报告 =======`);\n    console.log(`[FilterGroup] [${operationId}] 分组名称: ${groupName}`);\n    console.log(`[FilterGroup] [${operationId}] 操作耗时: ${operationDuration.toFixed(2)}ms`);\n    console.log(`[FilterGroup] [${operationId}] 预期更新: ${regexIdsToUpdate.length} 个`);\n    console.log(`[FilterGroup] [${operationId}] 实际更新: ${actualUpdatedCount} 个`);\n    console.log(`[FilterGroup] [${operationId}] 目标状态: ${enableState ? '启用' : '禁用'}`);\n    console.log(`[FilterGroup] [${operationId}] 更新规则详情:`, regexNamesToUpdate);\n    console.log(`[FilterGroup] [${operationId}] ================================`);\n\n    // 移除加载状态\n    removeLoadingState($loadingIndicator, operationId);\n    \n    // 第三步：智能UI更新 - 更新分组标题统计信息\n    updateGroupStatusAfterBatchOperation(groupName, areaKey, $groupHeader, operationId);\n    \n    // 触发全局状态更新事件\n    if (window.dispatchEvent) {\n      const eventDetail = {\n        operationId,\n        action: `batchUpdate${enableState ? 'Enable' : 'Disable'}Group`,\n        groupName,\n        areaKey,\n        updatedCount: actualUpdatedCount,\n        updatedIds: regexIdsToUpdate,\n        updatedNames: regexNamesToUpdate,\n        newState: enableState,\n        duration: operationDuration\n      };\n      \n      window.dispatchEvent(new CustomEvent('regexGroupBatchUpdated', {\n        detail: eventDetail\n      }));\n      \n      console.log(`[FilterGroup] [${operationId}] 已触发分组状态更新完成事件`);\n    }\n\n    // 延迟刷新整体UI，确保状态同步\n    setTimeout(() => {\n      console.log(`[FilterGroup] [${operationId}] 开始全局UI刷新...`);\n      if (typeof applyAllUIStates === 'function') {\n        applyAllUIStates().then(() => {\n          console.log(`[FilterGroup] [${operationId}] 全局UI刷新完成`);\n        }).catch(error => {\n          console.error(`[FilterGroup] [${operationId}] 全局UI刷新失败:`, error);\n        });\n      }\n    }, 200);\n\n    return true;\n\n  } catch (error) {\n    const errorDetails = {\n      operationId,\n      groupName,\n      areaKey,\n      enableState,\n      error: error.message,\n      stack: error.stack,\n      timestamp: new Date().toISOString()\n    };\n    \n    console.error(`[FilterGroup] [${operationId}] ======= 批量${actionName}失败报告 =======`);\n    console.error(`[FilterGroup] [${operationId}] 错误详情:`, errorDetails);\n    console.error(`[FilterGroup] [${operationId}] 完整错误对象:`, error);\n    console.error(`[FilterGroup] [${operationId}] ================================`);\n    \n    // 移除加载状态\n    removeLoadingState($loadingIndicator, operationId);\n    \n    // 用户友好的错误提示\n    let userMessage = `批量${actionName}分组\"${groupName}\"失败`;\n    if (error.message.includes('getTavernRegexes') || error.message.includes('replaceTavernRegexes')) {\n      userMessage += '：核心功能不可用，请刷新页面后重试';\n    } else {\n      userMessage += `：${error.message}`;\n    }\n    \n    window.alert(`${userMessage}\\n\\n操作ID: ${operationId}\\n详细信息请查看浏览器控制台`);\n    \n    return false;\n  } finally {\n    window.batchOperationInProgress = false;\n    console.log(`[FilterGroup] [${operationId}] 批量${actionName}流程结束`);\n  }\n}\n\n// 新增：批量操作后更新分组状态显示\nfunction updateGroupStatusAfterBatchOperation(groupName, areaKey, $groupHeader, operationId) {\n  console.log(`[FilterGroup] [${operationId}] 正在更新分组状态显示...`);\n  \n  try {\n    // 重新获取分组规则状态\n    const groupRegexes = getRegexesByGroupName(groupName, areaKey);\n    const enabledCount = groupRegexes.filter(regex => regex.enabled).length;\n    const totalCount = groupRegexes.length;\n    \n    // 更新分组标题中的统计信息\n    const statusText = totalCount > 0 ? ` (${enabledCount}/${totalCount})` : ` (${totalCount})`;\n    $groupHeader.find('span').first().text(groupName + statusText);\n    \n    console.log(`[FilterGroup] [${operationId}] 分组状态更新完成: ${groupName} ${statusText}`);\n    \n  } catch (error) {\n    console.error(`[FilterGroup] [${operationId}] 更新分组状态显示失败:`, error);\n  }\n}\n\nfunction getRegexesByGroupName(groupName, areaKey) {\n  try {\n    // 获取所有正则表达式数据\n    const allRegexes = getTavernRegexes();\n    const regexMap = new Map(allRegexes.map(regex => [regex.id, regex]));\n    \n    // 获取配置\n    const config = config_CONFIG.AREAS[areaKey];\n    if (!config) {\n      console.error(`[FilterGroup] 无效的区域键: ${areaKey}`);\n      return [];\n    }\n\n    // 获取所有DOM元素（不管是否可见）\n    const $list = $(config.listSelector);\n    const $allItems = $list.find(config.itemSelector);\n    \n    console.log(`[FilterGroup] 找到 ${$allItems.length} 个规则项，正在筛选分组 \"${groupName}\"`);\n    \n    const groupRegexes = [];\n    \n    // 遍历所有规则项，不受可见性影响\n    $allItems.each(function() {\n      const $item = $(this);\n      const itemId = $item.attr('id');\n      \n      // 提取规则名称\n      const scriptName = extractScriptNameFromItem($item, config.nameSelector, config.isRegexType);\n      \n      if (scriptName) {\n        // 检测分组\n        const detectedGroupName = detectGroupFromScriptName(scriptName);\n        \n        // 规范化分组名称：null 表示未分组\n        const normalizedDetectedGroup = detectedGroupName || \"未分组\";\n        const normalizedTargetGroup = groupName || \"未分组\";\n        \n        // 如果属于目标分组（支持未分组的匹配）\n        if (normalizedDetectedGroup === normalizedTargetGroup) {\n          const regex = regexMap.get(itemId);\n          if (regex) {\n            groupRegexes.push({\n              id: itemId,\n              name: scriptName,\n              enabled: regex.enabled,\n              regex: regex\n            });\n            console.log(`[FilterGroup] 找到匹配项: ${scriptName} -> 分组: ${normalizedDetectedGroup}`);\n          }\n        }\n      }\n    });\n    \n    console.log(`[FilterGroup] 分组 \"${groupName}\" 包含 ${groupRegexes.length} 个规则`);\n    return groupRegexes;\n    \n  } catch (error) {\n    console.error('[FilterGroup] 获取分组规则时出错:', error);\n    return [];\n  }\n}\n\n// 新增：提取脚本名称的辅助函数\nfunction extractScriptNameFromItem($item, nameSelector, isRegexType) {\n  try {\n    let $nameElement = $item.find(nameSelector);\n    if ($nameElement.length === 0) {\n      if (isRegexType) {\n        const regexSelectors = [\n          \".regex_script_name\",\n          \".name\",\n          \"div.flexGrow\",\n          \"div:first\",\n        ];\n        for (const selector of regexSelectors) {\n          $nameElement = $item.find(selector);\n          if ($nameElement.length > 0) break;\n        }\n      } else {\n        const scriptSelectors = [\n          \".script-name\",\n          \".name\",\n          \".script-title\",\n          \"div:first\",\n        ];\n        for (const selector of scriptSelectors) {\n          $nameElement = $item.find(selector);\n          if ($nameElement.length > 0) break;\n        }\n      }\n    }\n    if ($nameElement.length > 0) {\n      return $nameElement.text().trim();\n    }\n  } catch (e) {\n    console.error(\"提取脚本名称出错:\", e);\n  }\n  return null;\n}\n\n// 新增：从脚本名称检测分组的辅助函数（修复逻辑错误）\nfunction detectGroupFromScriptName(scriptName) {\n  if (!scriptName || typeof scriptName !== 'string') return null;\n  \n  // 按优先级顺序匹配分组模式\n  const match = scriptName.match(config_CONFIG.GROUP_PREFIX_REGEX);\n  \n  if (match) {\n    // 按优先级返回匹配的分组名：\n    // 1. 【中文全角括号】\n    // 2. [英文半角括号] \n    // 3. 连字符前缀-\n    const groupName = match[1] || match[2] || match[3];\n    \n    if (groupName && groupName.trim()) {\n      console.log(`[FilterGroup] 文件名 \"${scriptName}\" 解析到分组: \"${groupName}\"`);\n      return groupName.trim();\n    }\n  }\n  \n  // 如果没有匹配到任何分组模式，返回 null，由调用者决定如何处理\n  console.log(`[FilterGroup] 文件名 \"${scriptName}\" 没有匹配到分组模式，归入未分组`);\n  return null;\n}\n\n// 更新选择统计\nfunction updateSelectionStats($modal) {\n  const totalCount = $modal.find('input[type=\"checkbox\"]').length;\n  const selectedCount = $modal.find('input[type=\"checkbox\"]:checked').length;\n  \n  $modal.find('#selected-count').text(selectedCount);\n  $modal.find('#total-count').text(totalCount);\n}\n\n// 绑定模态窗口事件\nfunction bindModalEvents($modal, groupRegexes, areaKey, groupName) {\n  const modalId = `modal_${Date.now()}_${Math.random().toString(36).substr(2, 6)}`;\n  \n  console.log(`[FilterGroup] [${modalId}] 开始绑定模态窗口事件...`);\n  \n  // 关闭模态窗口的统一函数\n  function closeModal() {\n    console.log(`[FilterGroup] [${modalId}] 执行关闭模态窗口...`);\n    \n    try {\n      $modal.animate({ opacity: 0 }, 250, function() {\n        console.log(`[FilterGroup] [${modalId}] 移除模态窗口DOM...`);\n        $modal.remove();\n        \n        // 强制清理动态添加的CSS\n        $('#modal-responsive-styles').remove();\n        \n        // 移除可能的事件监听器\n        $(document).off('keydown.modal');\n        \n        console.log(`[FilterGroup] [${modalId}] 模态窗口关闭完成`);\n      });\n    } catch (error) {\n      console.error(`[FilterGroup] [${modalId}] 关闭模态窗口时出错:`, error);\n      // 强制移除\n      $modal.remove();\n      $('#modal-responsive-styles').remove();\n      $(document).off('keydown.modal');\n    }\n  }\n\n  // 点击遮罩层关闭（增强判断逻辑）\n  $modal.on('click', function(e) {\n    // 确保点击的是遮罩层本身，而不是内容区域\n    if (e.target === this || $(e.target).hasClass('modal-overlay')) {\n      console.log(`[FilterGroup] [${modalId}] 用户点击遮罩层，关闭模态窗口`);\n      closeModal();\n    }\n  });\n\n  // 点击关闭按钮和取消按钮\n  $modal.find('.modal-close, .btn-cancel').on('click', function(e) {\n    e.stopPropagation();\n    const buttonType = $(this).hasClass('modal-close') ? '关闭按钮' : '取消按钮';\n    console.log(`[FilterGroup] [${modalId}] 用户点击${buttonType}，关闭模态窗口`);\n    closeModal();\n  });\n\n  // ESC键关闭（防止重复绑定）\n  $(document).off('keydown.modal').on('keydown.modal', function(e) {\n    if (e.keyCode === 27) { // ESC键\n      console.log(`[FilterGroup] [${modalId}] 用户按下ESC键，关闭模态窗口`);\n      closeModal();\n      $(document).off('keydown.modal');\n    }\n  });\n\n  // 批量选择操作（增强错误处理）\n  $modal.find('.batch-select-all').on('click', function(e) {\n    e.stopPropagation();\n    try {\n      console.log(`[FilterGroup] [${modalId}] 执行全选操作`);\n      $modal.find('input[type=\"checkbox\"]').prop('checked', true);\n      updateSelectionStats($modal);\n    } catch (error) {\n      console.error(`[FilterGroup] [${modalId}] 全选操作失败:`, error);\n    }\n  });\n\n  $modal.find('.batch-select-none').on('click', function(e) {\n    e.stopPropagation();\n    try {\n      console.log(`[FilterGroup] [${modalId}] 执行全不选操作`);\n      $modal.find('input[type=\"checkbox\"]').prop('checked', false);\n      updateSelectionStats($modal);\n    } catch (error) {\n      console.error(`[FilterGroup] [${modalId}] 全不选操作失败:`, error);\n    }\n  });\n\n  $modal.find('.batch-invert').on('click', function(e) {\n    e.stopPropagation();\n    try {\n      console.log(`[FilterGroup] [${modalId}] 执行反选操作`);\n      $modal.find('input[type=\"checkbox\"]').each(function() {\n        $(this).prop('checked', !$(this).prop('checked'));\n      });\n      updateSelectionStats($modal);\n    } catch (error) {\n      console.error(`[FilterGroup] [${modalId}] 反选操作失败:`, error);\n    }\n  });\n\n  // 确定按钮 - 应用变更（大幅增强错误处理和日志记录）\n  $modal.find('.btn-confirm').on('click', async function(e) {\n    e.stopPropagation();\n    \n    const $confirmBtn = $(this);\n    const originalText = $confirmBtn.text();\n    const operationId = `confirm_${Date.now()}_${Math.random().toString(36).substr(2, 6)}`;\n    \n    console.log(`[FilterGroup] [${operationId}] 开始执行确定操作...`);\n    \n    try {\n      $confirmBtn.text('处理中...').prop('disabled', true);\n      \n      // 收集变更信息\n      const changes = [];\n      $modal.find('input[type=\"checkbox\"]').each(function() {\n        const $checkbox = $(this);\n        const regexId = $checkbox.closest('.regex-item').data('regex-id');\n        const currentState = $checkbox.prop('checked');\n        const originalState = $checkbox.data('original-state');\n        \n        if (currentState !== originalState) {\n          changes.push({\n            id: regexId,\n            newState: currentState,\n            originalState: originalState\n          });\n        }\n      });\n\n      console.log(`[FilterGroup] [${operationId}] 收集到 ${changes.length} 个状态变更`);\n\n      if (changes.length === 0) {\n        console.log(`[FilterGroup] [${operationId}] 没有检测到状态变更，直接关闭`);\n        closeModal();\n        return;\n      }\n\n      console.log(`[FilterGroup] [${operationId}] 变更详情:`, changes);\n\n      // 执行批量状态变更\n      console.log(`[FilterGroup] [${operationId}] 开始应用状态变更...`);\n      const success = await applyRegexStateChanges(changes);\n      \n      if (success) {\n        console.log(`[FilterGroup] [${operationId}] 精细化管理操作成功完成`);\n        \n        // 更新外部分组的批量开关状态\n        try {\n          updateGroupBatchSwitchState(areaKey, groupName);\n          console.log(`[FilterGroup] [${operationId}] 分组状态同步完成`);\n        } catch (syncError) {\n          console.error(`[FilterGroup] [${operationId}] 分组状态同步失败:`, syncError);\n          // 不阻断主流程\n        }\n        \n        closeModal();\n        \n        // 刷新UI\n        setTimeout(() => {\n          console.log(`[FilterGroup] [${operationId}] 开始刷新UI...`);\n          if (typeof applyAllUIStates === 'function') {\n            applyAllUIStates().then(() => {\n              console.log(`[FilterGroup] [${operationId}] UI刷新完成`);\n            }).catch(uiError => {\n              console.error(`[FilterGroup] [${operationId}] UI刷新失败:`, uiError);\n            });\n          } else {\n            console.warn(`[FilterGroup] [${operationId}] applyAllUIStates 函数不可用`);\n          }\n        }, 100);\n      } else {\n        console.error(`[FilterGroup] [${operationId}] 应用状态变更失败`);\n        window.alert('操作失败，请重试。');\n      }\n      \n    } catch (error) {\n      console.error(`[FilterGroup] [${operationId}] 精细化管理操作失败:`, error);\n      console.error(`[FilterGroup] [${operationId}] 错误堆栈:`, error.stack);\n      window.alert(`操作失败: ${error.message}\\n\\n操作ID: ${operationId}\\n请查看控制台获取详细信息。`);\n    } finally {\n      $confirmBtn.text(originalText).prop('disabled', false);\n      console.log(`[FilterGroup] [${operationId}] 确定操作流程结束`);\n    }\n  });\n  \n  console.log(`[FilterGroup] [${modalId}] 模态窗口事件绑定完成`);\n}\n\n// 应用正则表达式状态变更\nasync function applyRegexStateChanges(changes) {\n  try {\n    const allRegexes = getTavernRegexes();\n    const regexMap = new Map(allRegexes.map(regex => [regex.id, regex]));\n    \n    let modifiedCount = 0;\n    for (const change of changes) {\n      const regex = regexMap.get(change.id);\n      if (regex) {\n        regex.enabled = change.newState;\n        modifiedCount++;\n      }\n    }\n    \n    if (modifiedCount > 0) {\n      await replaceTavernRegexes(allRegexes, {});\n      console.log(`[FilterGroup] 成功更新 ${modifiedCount} 个正则表达式的状态。`);\n      return true;\n    }\n    \n    return false;\n  } catch (error) {\n    console.error('[FilterGroup] 应用状态变更失败:', error);\n    return false;\n  }\n}\n\n// 更新分组批量开关的状态（保持状态同步）\nfunction updateGroupBatchSwitchState(areaKey, groupName) {\n  try {\n    const config = config_CONFIG.AREAS[areaKey];\n    const $list = $(config.listSelector);\n    \n    // 查找对应的分组\n    $list.find('.script-group-header').each(function() {\n      const $header = $(this);\n      const headerGroupName = $header.find('span').text().split(' (')[0];\n      \n      if (headerGroupName === groupName) {\n        const $groupContent = $header.next('.script-group-content');\n        const $visibleItems = $groupContent.find('.regex-script-label:visible');\n        \n        // 检查分组内所有规则的状态\n        let enabledCount = 0;\n        let totalCount = 0;\n        \n        $visibleItems.each(function() {\n          const $item = $(this);\n          const isEnabled = !$item.find('.disable_regex').prop('checked');\n          if (isEnabled) enabledCount++;\n          totalCount++;\n        });\n        \n        // 更新分组标题中的统计信息\n        const statusText = totalCount > 0 ? ` (${enabledCount}/${totalCount})` : ` (${totalCount})`;\n        $header.find('span').text(groupName + statusText);\n        \n        console.log(`[FilterGroup] 更新分组 \"${groupName}\" 状态: ${enabledCount}/${totalCount} 已启用`);\n        return;\n      }\n    });\n  } catch (error) {\n    console.error('[FilterGroup] 更新分组批量开关状态失败:', error);\n  }\n}\n\nfunction initializeUnifiedUI() {\n  if (window.unifiedUIInitialized) return;\n  \n  try {\n    window.unifiedUIInitialized = !0;\n    console.log(\"[FilterGroup]正在初始化统一UI处理模块...\");\n    \n    // 添加批量操作完成后的状态同步监听器\n    window.addEventListener('regexBatchOperationCompleted', function(event) {\n      console.log('[FilterGroup] 批量操作完成，正在同步状态...', event.detail);\n      // 延迟一点时间确保UI已更新\n      setTimeout(() => {\n        // 这里可以添加额外的状态同步逻辑\n        console.log('[FilterGroup] 状态同步完成');\n      }, 500);\n    });\n    \n    (function addControlIcons() {\n      console.log(\"[FilterGroup] 开始为各区域添加控制图标...\");\n      \n      for (const [areaKey, config] of Object.entries(config_CONFIG.AREAS)) {\n        try {\n          console.log(`[FilterGroup] 处理区域: ${areaKey}`);\n          console.log(`[FilterGroup] 标题选择器: ${config.titleSelector}`);\n          \n          const $titleElem = $(config.titleSelector);\n          console.log(`[FilterGroup] 找到标题元素数量: ${$titleElem.length}`);\n          \n          if (0 !== $titleElem.length) {\n            addFilterIcon(\n              $titleElem,\n              areaKey,\n              getFilterState,\n              updateFilterIcon,\n              applyUIState,\n              capitalizeFirstLetter\n            );\n            addGroupIcons(\n              $titleElem,\n              areaKey,\n              getGroupingEnabledState,\n              updateGroupIcon,\n              applyUIState\n            );\n            addRefreshIcon($titleElem, areaKey, applyAllUIStates);\n            // 新增：为局部正则脚本添加移动到全局的按钮\n            addMoveToGlobalIcon($titleElem, areaKey, applyAllUIStates);\n          } else if (areaKey === \"scoped-regex\") {\n            // 如果找不到标题元素，但是是局部正则脚本区域，使用备用方案\n            console.warn(`[FilterGroup] 局部正则脚本区域未找到标题元素，使用备用操作栏`);\n            createMoveToGlobalActionBar();\n          }\n        } catch (error) {\n          console.error(`[FilterGroup]初始化区域 ${areaKey} 的控制图标时出错:`, error);\n        }\n      }\n      \n      console.log(\"[FilterGroup] 控制图标添加完成\");\n    })();\n    \n    (function setupEventListeners() {\n      try {\n        if (\"function\" == typeof eventMakeFirst &&\n            \"undefined\" != typeof tavern_events &&\n            tavern_events.SETTINGS_UPDATED) {\n          eventMakeFirst(tavern_events.SETTINGS_UPDATED, function () {\n            console.log(\"[FilterGroup]设置已更新，正在刷新UI...\");\n            applyAllUIStates().then(() => {\n              console.log(\"[FilterGroup]UI刷新完成\");\n            }).catch((error) => {\n              console.error(\"[FilterGroup]UI刷新失败:\", error);\n            });\n          });\n        }\n      } catch (error) {\n        console.error(\"[FilterGroup]设置事件监听器时出错:\", error);\n      }\n    })();\n    \n    // 延迟应用UI状态，提高浏览器兼容性\n    setTimeout(() => {\n      applyAllUIStates().catch((error) => {\n        console.error(\"[FilterGroup]初始化UI状态时出错:\", error);\n      });\n    }, 100);\n    \n  } catch (error) {\n    console.error(\"[FilterGroup]初始化统一UI时出错:\", error);\n    window.unifiedUIInitialized = false;\n  }\n}\nfunction getGroupingEnabledState(areaKey) {\n  return \"true\" === localStorage.getItem(config_CONFIG.getStorageKey(areaKey));\n}\nfunction getFilterState(areaKey) {\n  return parseInt(\n    localStorage.getItem(`regexFilter${capitalizeFirstLetter(areaKey)}`) || \"0\"\n  );\n}\nfunction capitalizeFirstLetter(string) {\n  return string\n    .split(\"-\")\n    .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\n    .join(\"\");\n}\nfunction resetAreaUI(areaKey) {\n  const config = config_CONFIG.AREAS[areaKey],\n    $list = $(config.listSelector);\n  return (\n    0 !== $list.length &&\n    ((function removeGrouping(areaKey) {\n      const config = config_CONFIG.AREAS[areaKey],\n        $list = $(config.listSelector);\n      if (0 === $list.length) return !1;\n      const $groupHeaders = $list.find(\".script-group-header\"),\n        $groupContents = $list.find(\".script-group-content\");\n      if (0 === $groupHeaders.length || 0 === $groupContents.length) return !1;\n      const $items = $list.find(config.itemSelector);\n      return (\n        $items.each(function () {\n          $(this).css(\"width\", \"\").find(\".drag-handle\").show();\n        }),\n        $list.append($items),\n        $groupHeaders.remove(),\n        $groupContents.remove(),\n        (function restoreSortable(areaKey) {\n          const config = config_CONFIG.AREAS[areaKey],\n            $list = $(config.listSelector);\n          $list.length &&\n            ($list\n              .find(\".drag-handle, \" + config.itemSelector)\n              .off(\"mousedown.groupui dragstart.groupui\"),\n            $list.find(\".drag-handle\").show());\n        })(areaKey),\n        !0\n      );\n    })(areaKey),\n    $list.find(config.itemSelector).css(\"display\", \"\"),\n    !0)\n  );\n}\nfunction updateFilterIcon(areaKey) {\n  const $icon = $(`#${areaKey}-filter-icon`);\n  if (0 === $icon.length) return;\n  const config = [\n    { class: \"fa-filter\", color: \"\", title: \"显示全部 (点击切换到仅显示开启)\" },\n    {\n      class: \"fa-check-circle\",\n      color: \"\",\n      title: \"仅显示开启 (点击切换到仅显示隐藏)\",\n    },\n    {\n      class: \"fa-times-circle\",\n      color: \"\",\n      title: \"仅显示隐藏 (点击切换到显示全部)\",\n    },\n  ][getFilterState(areaKey)];\n  $icon.attr(\"class\", \"\").addClass(\"fa-solid \" + config.class),\n    $icon.attr(\"title\", config.title);\n}\nfunction updateGroupIcon(areaKey) {\n  const isGroupEnabled = getGroupingEnabledState(areaKey),\n    $groupIcon = $(`#${areaKey}-group-icon`);\n  $groupIcon.length > 0 &&\n    ($groupIcon.attr(\n      \"class\",\n      \"fa-solid \" + (isGroupEnabled ? \"fa-folder-open\" : \"fa-folder\")\n    ),\n    $groupIcon.attr(\"title\", isGroupEnabled ? \"关闭分组\" : \"开启分组\"));\n  const $toggleAll = $(`#${areaKey}-toggle-all`);\n  $toggleAll.length > 0 &&\n    (isGroupEnabled\n      ? $toggleAll.css(\"display\", \"\")\n      : $toggleAll.css(\"display\", \"none\"));\n}\nfunction applyUIState(areaKey) {\n  if (!config_CONFIG.AREAS[areaKey])\n    return console.log(`[FilterGroup]区域 ${areaKey} 配置不存在，跳过处理`), !1;\n  if (window.batchOperationInProgress)\n    return console.log(\"[FilterGroup]批量操作进行中，暂时跳过UI刷新\"), !1;\n  const config = config_CONFIG.AREAS[areaKey],\n    isGroupEnabled = getGroupingEnabledState(areaKey),\n    filterState = getFilterState(areaKey);\n  resetAreaUI(areaKey);\n  const $list = $(config.listSelector);\n  if (0 === $list.length) return !1;\n  return (\n    $list.find(config.itemSelector).each(function () {\n      const $item = $(this);\n      let isEnabled;\n      (isEnabled = config.isRegexType\n        ? !$item.find(\".disable_regex\").prop(\"checked\")\n        : \"none\" !== $item.find(\".script-toggle-on\").css(\"display\")),\n        0 === filterState\n          ? $item.css(\"display\", \"\")\n          : 1 === filterState\n          ? $item.css(\"display\", isEnabled ? \"\" : \"none\")\n          : 2 === filterState && $item.css(\"display\", isEnabled ? \"none\" : \"\");\n    }),\n    isGroupEnabled &&\n      (function applyGrouping(areaKey) {\n        const config = config_CONFIG.AREAS[areaKey],\n          $list = $(config.listSelector);\n        if (0 === $list.length) return !1;\n        const $items = $list.find(config.itemSelector);\n        if (0 === $items.length) return !1;\n        const groups = groupScripts(\n          $items,\n          config.nameSelector,\n          config.isRegexType\n        );\n        if (!groups || 0 === groups.length) return !1;\n        return (\n          !!groups.some((group) => null !== group.name) &&\n          ($list.children().detach(),\n          groups.forEach((group) => {\n            const groupName = null === group.name ? \"未分组\" : group.name,\n              isFolded = (function getGroupFoldState(\n                areaKey,\n                groupName,\n                defaultState = !0\n              ) {\n                const storageKey = `script_group_fold_state_${areaKey}`,\n                  foldStates = JSON.parse(\n                    localStorage.getItem(storageKey) || \"{}\"\n                  );\n                return groupName in foldStates\n                  ? foldStates[groupName]\n                  : defaultState;\n              })(areaKey, groupName, !0),\n              visibleItems = group.items.filter(\n                (item) => \"none\" !== $(item).css(\"display\")\n              ),\n              $groupHeader = $(\n                `\\n            <div class=\"script-group-header\" style=\"${\n                  config_CONFIG.STYLES.groupHeaderStyle\n                }${\n                  0 === visibleItems.length ? \"display: none;\" : \"\"\n                }\">\\n                <span>${groupName} (${\n                  visibleItems.length\n                })</span>\\n                <i class=\"fa-solid ${\n                  isFolded ? \"fa-angle-down\" : \"fa-angle-up\"\n                } group-toggle-icon\"></i>\\n            </div>\\n        `\n              ),\n              $groupContent = $(\n                `\\n            <div class=\"script-group-content\" style=\"${\n                  config_CONFIG.STYLES.groupContentStyle\n                }${\n                  isFolded || 0 === visibleItems.length ? \" display: none;\" : \"\"\n                }\">\\n            </div>\\n        `\n              );\n            $list.append($groupHeader),\n              $list.append($groupContent),\n                config.isRegexType &&\n                (function createBatchActionButtons(\n                  $groupHeader,\n                  $groupContent\n                ) {\n                  const $actionButtons = $(\n                    '\\n        <div class=\"group-actions\" style=\"display: inline-flex; margin-left: auto; margin-right: 42px;\">\\n            <i class=\"fa-solid fa-cog batch-manage\" style=\"margin-right: 12px; cursor: pointer;\" title=\"管理\"></i>\\n            <i class=\"fa-solid fa-check-circle batch-enable\" style=\"margin-right: 12px; cursor: pointer;\" title=\"批量开启\"></i>\\n            <i class=\"fa-solid fa-times-circle batch-disable\" style=\"margin-right: 12px; cursor: pointer;\" title=\"批量关闭\"></i>\\n            <i class=\"fa-solid fa-trash-alt batch-delete\" style=\"cursor: pointer;\" title=\"批量删除\"></i>\\n        </div>\\n    '\n                  );\n                  \n                  $groupHeader.find(\"span\").after($actionButtons);\n                  const currentGroupName = $groupHeader.find(\"span\").text().split(\" (\")[0];\n                  \n                  // 新增：管理按钮事件处理\n                  addDebouncedClickHandler(\n                    $actionButtons.find(\".batch-manage\"),\n                    function () {\n                      createRegexManagementModal(currentGroupName, $groupContent, areaKey);\n                    },\n                    { operationName: \"打开精细化管理\", minDelay: 100 }\n                  );\n                  \n                  return (\n                    $groupHeader.closest(\".regex-scripts-area\").length,\n                    addDebouncedClickHandler(\n                      $actionButtons.find(\".batch-enable\"),\n                      function () {\n                        if (\n                          window.confirm(\n                            \"确定要批量开启该分组下的所有正则表达式吗？\"\n                          )\n                        ) {\n                          // 修复：使用优化的批量状态变更函数\n                          const currentGroupName = $groupHeader.find(\"span\").text().split(\" (\")[0];\n                          console.log(`[FilterGroup] 开始批量开启分组 \"${currentGroupName}\" 的所有规则...`);\n                          batchUpdateRegexStateByGroup(currentGroupName, areaKey, true, $groupHeader);\n                        }\n                      },\n                      { operationName: \"批量开启正则表达式\", minDelay: 200 }\n                    ),\n                    addDebouncedClickHandler(\n                      $actionButtons.find(\".batch-disable\"),\n                      function () {\n                        if (\n                          window.confirm(\n                            \"确定要批量关闭该分组下的所有正则表达式吗？\"\n                          )\n                        ) {\n                          // 修复：使用优化的批量状态变更函数\n                          const currentGroupName = $groupHeader.find(\"span\").text().split(\" (\")[0];\n                          console.log(`[FilterGroup] 开始批量关闭分组 \"${currentGroupName}\" 的所有规则...`);\n                          batchUpdateRegexStateByGroup(currentGroupName, areaKey, false, $groupHeader);\n                        }\n                      },\n                      { operationName: \"批量关闭正则表达式\", minDelay: 200 }\n                    ),\n                    addDebouncedClickHandler(\n                      $actionButtons.find(\".batch-delete\"),\n                      function () {\n                        if (\n                          window.confirm(\n                            \"确定要批量删除该分组下的所有正则表达式吗？此操作不可撤销！\"\n                          )\n                        ) {\n                          // 修复BUG：不再依赖DOM可见性，直接从数据源获取分组规则\n                          const currentGroupName = $groupHeader.find(\"span\").text().split(\" (\")[0];\n                          console.log(`[FilterGroup] 开始批量删除分组 \"${currentGroupName}\" 的所有规则...`);\n                          \n                          // 使用优化的批量删除函数\n                          batchDeleteRegexesByGroup(currentGroupName, areaKey, $groupHeader);\n                        }\n                      },\n                      { operationName: \"批量删除正则表达式\", minDelay: 200 }\n                    ),\n                    $actionButtons\n                  );\n                })($groupHeader, $groupContent),\n              group.items.forEach(($item) => {\n                $item.css(\"width\", \"97%\").find(\".drag-handle\").hide(),\n                  $groupContent.append($item);\n              }),\n              addGroupHeaderClickHandler($groupHeader, areaKey);\n          }),\n          (function fixSortableAfterGrouping(areaKey) {\n            const config = config_CONFIG.AREAS[areaKey],\n              $list = $(config.listSelector);\n            $list.length &&\n              ($list.find(\".drag-handle\").hide(),\n              $list\n                .find(\n                  \".drag-handle, .script-group-header, .script-group-content, \" +\n                    config.itemSelector\n                )\n                .off(\"mousedown.groupui dragstart.groupui\")\n                .on(\"mousedown.groupui dragstart.groupui\", function (e) {\n                  return e.stopPropagation(), e.preventDefault(), !1;\n                }));\n          })(areaKey),\n          !0)\n        );\n      })(areaKey),\n    !0\n  );\n}\nfunction applyAllUIStates() {\n  return window.batchOperationInProgress\n    ? (console.log(\"[FilterGroup]批量操作进行中，暂时跳过UI刷新\"),\n      Promise.resolve(!1))\n    : isUIDebouncing()\n    ? (console.log(\"[FilterGroup]UI操作已在进行中，已添加到操作队列\"),\n      (function queueOperation(name, callback, options = {}) {\n        const { priority = 10 } = options,\n          operation = { name, callback, priority, timestamp: Date.now() };\n        let inserted = !1;\n        for (let i = 0; i < operationQueue.length; i++)\n          if (operationQueue[i].priority > priority) {\n            operationQueue.splice(i, 0, operation), (inserted = !0);\n            break;\n          }\n        return (\n          inserted || operationQueue.push(operation),\n          isDebouncing || processNextOperation(),\n          Promise.resolve(!1)\n        );\n      })(\n        \"刷新UI\",\n        () =>\n          refreshAllAreas().then(\n            () => (console.log(\"[FilterGroup]队列刷新完成\"), !0)\n          ),\n        { priority: 5 }\n      ))\n    : debounceUI(async () => await refreshAllAreas(), {\n        operationName: \"应用所有UI状态\",\n        minDelay: 500,\n      });\n}\nasync function refreshAllAreas() {\n  await new Promise((resolve) => setTimeout(resolve, 100));\n  const promises = [];\n  for (const areaKey in config_CONFIG.AREAS) {\n    applyUIState(areaKey) ||\n      promises.push(\n        new Promise((resolve) => {\n          setTimeout(() => {\n            resolve(applyUIState(areaKey));\n          }, 500);\n        })\n      );\n  }\n  return (\n    await Promise.all(promises),\n    console.log(\"[FilterGroup]所有区域UI刷新完成\"),\n    !0\n  );\n}\nconst unifiedUI = {\n  initialize: initializeUnifiedUI,\n  applyState: applyUIState,\n  applyAllStates: applyAllUIStates,\n  resetUI: resetAreaUI,\n  isDebouncing: isUIDebouncing,\n};\n$(function () {\n  setTimeout(function () {\n    !(function initializeAllUI() {\n      console.log(\"[FilterGroup]正在初始化统一UI组件...\"),\n        initializeUnifiedUI();\n    })();\n  }, 500);\n}),\n  (window.unifiedUI = unifiedUI),\n  $(function () {\n    console.log(\"正则脚本统一UI管理已初始化\");\n    \n    // 性能优化和新功能验证\n    console.log(\"[FilterGroup] 已启用以下功能:\");\n    console.log(\"- ✓ 优化的批量操作性能\");\n    console.log(\"- ✓ 分组内规则精细化管理\");\n    console.log(\"- ✓ 模态窗口交互界面\");\n    console.log(\"- ✓ 状态同步机制\");\n    console.log(\"- ✓ 修复分组折叠时管理功能无法使用的BUG\");\n    console.log(\"- ✓ 响应式设计优化，适配移动端\");\n    console.log(\"- ✓ 局部正则脚本批量移至全局功能 (V9修复版)\");\n    console.log(\"- ✓ 修复逻辑判断错误，使用正确的API属性\");\n    console.log(\"- ✓ 修复UI样式问题，与系统主题完美适配\");\n    \n    // 兼容性检查\n    if (typeof getTavernRegexes === 'function' && typeof replaceTavernRegexes === 'function') {\n      console.log(\"[FilterGroup] ✓ 核心API兼容性检查通过\");\n    } else {\n      console.warn(\"[FilterGroup] ⚠ 核心API可能不可用，某些功能可能受限\");\n    }\n    \n    // 设备检测\n    const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) || window.innerWidth <= 768;\n    if (isMobile) {\n      console.log(\"[FilterGroup] ✓ 检测到移动设备，已启用移动端优化\");\n    }\n    \n    // 注册全局快捷键（可选）\n    $(document).on('keydown', function(e) {\n      // Ctrl+Shift+M: 快速打开管理模态窗口（如果当前有选中的分组）\n      if (e.ctrlKey && e.shiftKey && e.keyCode === 77) {\n        const $lastClickedManageBtn = $('.batch-manage:hover').first();\n        if ($lastClickedManageBtn.length > 0) {\n          $lastClickedManageBtn.click();\n          e.preventDefault();\n        }\n      }\n    });\n  });\n",
                            "info": "**作者**：Lai（fengyuzhe使用ai修改补充版本）\n**版本**：250717\n**脚本说明：\n**由于版本更新，导致批量开关正则功能失效，本人虽然对代码不理解使用cline在vscode中修改，可能会有bug，还请大家告知，我尽量让ai修改？**\n** 根据正则/酒馆助手脚本开关状态筛选条目，快速切换显示，并支持分组视图与管理。\n\n## 功能简介\n\n此脚本在全局和局部正则/酒馆助手脚本库标题旁添加了筛选、分组与刷新图标，点击图标即可切换视图。\n\n在分组标题栏上有批量开启、关闭、删除图标，点击图标即可批量管理分组条目。\n\n## ！！非常重要！！\n**如果在【开启分组视图】的情况下拖动了条目/分组，可能会【丢失所有正则】！虽然脚本【已经禁用】了分组视图下的拖拽功能，但是如果你依然发现自己~~（不知为何）~~拖动了条目，请【不要松手按 F5/cmd+R 直接刷新网页或者直接锁屏手机】打断这个过程。**\n\n上述情况应该【极其少见】，如果你发现自己依然能够拖拽，请回帖 at 我。\n\n在没有打开分组视图（也就是条目左边有三个小横杠）的时候是能够正常拖拽改变顺序的。\n\n## 筛选功能\n\n各部条目开关状态筛选条目，支持循环切换三种显示模式：\n\n- :clipboard: **显示全部** - 显示所有可用正则/酒馆助手脚本\n- :white_check_mark: **仅显示已开启** - 筛选出当前已激活的正则/酒馆助手脚本（打勾图标）\n- :x: **仅显示已隐藏** - 筛选出当前已关闭的正则/酒馆助手脚本（打叉图标）\n\n## 分组功能\n\n脚本会根据名称前缀自动为**连续的**条目建立分组，从而得到美观的分组视图。分组支持多种命名格式：\n\n- **【分组名】脚本名称** - 使用中文方括号\n- **[分组名]脚本名称** - 使用英文方括号\n- **分组名-脚本名称** - 使用短横线分隔\n\n如需支持更多格式，欢迎回帖提出。\n\n### 分组特性：\n\n- **根据前缀分组**：根据脚本名称中的前缀自动分组\n- **顺序保持**：保持条目的原始排序\n- **折叠/展开**：可一键展开或折叠所有分组，提高界面整洁度\n- **分组统计**：显示每个分组内包含的条目数量\n- **分组管理**：批量开启、关闭、删除分组下的条目，使用此功能请务必谨慎，一旦操作无法撤回！\n\n通过标题旁的文件夹图标可以随时切换启用/禁用分组功能。\n\n## 使用提示\n\n- 使用分组功能，需要编辑好前缀与条目顺序。\n- 分组和筛选功能可以同时使用。\n- 分组状态（包括折叠状态）和筛选设置会记录在浏览器本地存储中，刷新了也能保持。\n- 支持与 https://discord.com/channels/1291925535324110879/1344362686900605043 等脚本共同使用，不会冲突。\n- 更改条目设置（比如开关状态）后，稍等一小下，视图**会自动刷新**。\n- 具有防快速点击延迟，避免过快地操作出现问题。\n- 注意：某些情况视图可能会出错/按钮点击了没效果，请试试点击“刷新”小图标，或者刷新酒馆网页。",
                            "buttons": [],
                            "data": {},
                            "enabled": true
                        }
                    },
                    {
                        "type": "script",
                        "value": {
                            "id": "70c0bab7-c2a2-46f1-a0b9-21835bc4566e",
                            "name": "一种批量更新覆盖支持压缩包的上传正则方式1.2",
                            "content": "const e=window.getTavernRegexes,n=window.replaceTavernRegexes,o=window.toastr,t=\"upload-regex-button\";let r=null;const i=\"https://cdnjs.cloudflare.com/ajax/libs/jszip/3.10.1/jszip.min.js\";function s(e){const n=(e||\"\").toLowerCase();return n.startsWith(\"替换\")?2:n.startsWith(\"删除\")?3:n.startsWith(\"消除\")?4:1}async function a(e){const n=[],t=[];if(Array.from(e).some((e=>e.name.toLowerCase().endsWith(\".zip\"))))try{await async function(){return\"function\"==typeof JSZip?(console.log(\"JSZip 已加载。\"),Promise.resolve()):r?(console.log(\"JSZip 正在加载中...\"),r):(console.log(`尝试从 CDN 加载 JSZip: ${i}`),o&&\"function\"==typeof o.info&&o.info(\"首次上传ZIP，正在尝试加载 JSZip 库...\",\"请稍候\",{timeOut:3e3}),r=new Promise(((e,n)=>{const t=document.createElement(\"script\");t.src=i,t.async=!0,t.onload=()=>{\"function\"==typeof JSZip?(console.log(\"JSZip 从 CDN 加载成功。\"),o&&\"function\"==typeof o.success&&o.success(\"JSZip 库加载成功！\",\"成功\",{timeOut:2e3}),e()):(console.error(\"JSZip CDN 脚本已加载，但 JSZip 对象未定义。\"),o&&\"function\"==typeof o.error&&o.error(\"JSZip 库加载异常。\",\"错误\"),n(new Error(\"JSZip loaded but not defined.\")))},t.onerror=e=>{console.error(\"从 CDN 加载 JSZip 失败:\",e),o&&\"function\"==typeof o.error&&o.error(\"JSZip 库加载失败，无法处理ZIP文件。请检查网络连接或浏览器控制台。\",\"错误\"),r=null,n(e)},document.head.appendChild(t)})),r)}()}catch(e){console.error(\"JSZip 加载失败，部分ZIP文件可能无法处理。\",e)}for(const r of Array.from(e)){const e=r.name.toLowerCase();if(e.endsWith(\".json\"))try{const e=await r.text();n.push({originalFileName:r.name,content:e})}catch(e){t.push(`读取JSON文件 ${r.name} 失败: ${e.message}`)}else if(e.endsWith(\".zip\")){if(\"function\"!=typeof JSZip){const e=`JSZip 库未能加载或不可用，无法处理 ZIP 文件: ${r.name}。`;o&&\"function\"==typeof o.error?o.error(e.replace(/\\n/g,\"<br>\")):alert(e),console.error(e),t.push(`跳过ZIP ${r.name}: JSZip 未加载/不可用。`);continue}try{const e=new JSZip,o=await e.loadAsync(r),i=[];o.forEach(((e,o)=>{o.name.toLowerCase().endsWith(\".json\")&&!o.dir&&i.push(o.async(\"string\").then((e=>{n.push({originalFileName:o.name,content:e,sourceArchiveName:r.name})})).catch((e=>{t.push(`从ZIP ${r.name} 提取 ${o.name} 失败: ${e.message}`)})))})),await Promise.all(i)}catch(e){t.push(`处理 ZIP 文件 ${r.name} 失败: ${e.message}`)}}else t.push(`跳过不支持的文件类型: ${r.name}`)}return{jsonDataSources:n,processingErrors:t}}$((()=>{const r=window.parent.document;console.log(\"上传正则扩展: 初始化中...\");const i=$(\"#extensionsMenu\",r);if(i.length)if(0===$(`#${t}`,r).length){const c=`\\n                <div id=\"${t}\" class=\"list-group-item flex-container flexGap5 interactable\" title=\"上传正则JSON文件或包含JSON的ZIP包(可多选)\" tabIndex=\"0\">\\n                    <i class=\"fa-solid fa-upload\"></i>\\n                    <span>上传正则</span>\\n            </div>\\n        `;try{i.append(c),console.log(\"上传正则扩展: 按钮已成功添加到扩展菜单。\");$(`#${t}`,r).on(\"click\",(()=>{if(console.log('\"上传正则\"按钮被点击。'),\"function\"!=typeof e||\"function\"!=typeof n){const e=\"SillyTavern 正则管理功能不可用。\";return o&&\"function\"==typeof o.error?o.error(e):alert(e),void console.error(\"getTavernRegexes or replaceTavernRegexes is not a function.\")}\"object\"==typeof o&&\"function\"==typeof o.error||console.warn(\"Toastr 通知系统不完全可用，某些消息将回退到使用 alert。\");const t=document.createElement(\"input\");t.type=\"file\",t.accept=\".json,.zip\",t.multiple=!0,t.style.display=\"none\",t.onchange=async r=>{const i=r.target.files;let c=t;if(!i||0===i.length)return o&&\"function\"==typeof o.warning?o.warning(\"没有选择文件。\"):alert(\"没有选择文件。\"),void(c.parentNode&&c.parentNode.removeChild(c));const{jsonDataSources:l,processingErrors:p}=await a(i);if(c.parentNode&&c.parentNode.removeChild(c),p.length>0){const e=`在文件读取/ZIP提取阶段出现以下问题:\\n${p.join(\"\\n\")}`;o&&\"function\"==typeof o.warning?o.warning(e.replace(/\\n/g,\"<br>\"),\"文件处理问题\",{timeOut:15e3,extendedTimeOut:7e3,escapeHtml:!1}):alert(e),console.warn(\"文件处理问题:\",p)}if(0===l.length){const e=\"未找到可供处理的 JSON 内容。\";return void(o&&\"function\"==typeof o.info?o.info(e):alert(e))}let m=null;if(window.confirm(`要将提取到的 ${l.length} 个正则条目全部上传为【全局】正则吗？\\n(点击\"取消\"将询问是否设为【局部】正则)`)?m=\"global\":window.confirm(`要将提取到的 ${l.length} 个正则条目全部上传为【局部】正则 (当前角色) 吗？`)&&(m=\"character\"),!m)return void(o&&\"function\"==typeof o.info?o.info(\"批量上传已取消：未选择作用域。\"):alert(\"批量上传已取消：未选择作用域。\"));console.log(`批量上传作用域选定为: ${m}`);const{tavernRegexObjects:u,parsingErrors:f}=function(e,n){const o=[],t=[];return e.forEach((e=>{try{const r=JSON.parse(e.content);if(!r.scriptName||!r.findRegex)return void t.push(`${e.originalFileName}${e.sourceArchiveName?` (来自ZIP: ${e.sourceArchiveName})`:\"\"}: 文件格式无效 (缺少 scriptName 或 findRegex)。`);const i={user_input:!1,ai_output:!1,slash_command:!1,world_info:!1},s=Array.isArray(r.placement)?r.placement:[];s.includes(1)&&(i.user_input=!0),s.includes(2)&&(i.ai_output=!0),s.includes(3)&&(i.slash_command=!0),s.includes(5)&&(i.world_info=!0);const a={display:\"boolean\"==typeof r.markdownOnly&&r.markdownOnly,prompt:\"boolean\"==typeof r.promptOnly&&r.promptOnly};o.push({id:r.id||window.crypto.randomUUID(),script_name:r.scriptName,find_regex:r.findRegex,replace_string:r.replaceString||\"\",enabled:\"boolean\"!=typeof r.disabled||!1===r.disabled,run_on_edit:\"boolean\"==typeof r.runOnEdit&&r.runOnEdit,scope:n,source:i,destination:a,min_depth:void 0===r.minDepth||null===r.minDepth?null:Number(r.minDepth),max_depth:void 0===r.maxDepth||null===r.maxDepth?null:Number(r.maxDepth),_sourceFile:e.originalFileName,_sourceArchive:e.sourceArchiveName})}catch(n){t.push(`${e.originalFileName}${e.sourceArchiveName?` (来自ZIP: ${e.sourceArchiveName})`:\"\"}: 解析JSON失败 (${n.message})。`)}})),o.sort(((e,n)=>{const o=s(e.script_name),t=s(n.script_name);if(o!==t)return o-t;const r=e.script_name||\"\",i=n.script_name||\"\";return r.localeCompare(i)})),{tavernRegexObjects:o,parsingErrors:t}}(l,m);if(f.length>0){const e=`在JSON内容解析/验证阶段出现以下问题:\\n${f.join(\"\\n\")}`;o&&\"function\"==typeof o.warning?o.warning(e.replace(/\\n/g,\"<br>\"),\"JSON 处理警告\",{timeOut:15e3,extendedTimeOut:7e3,escapeHtml:!1}):alert(e),console.warn(\"JSON 内容解析/验证问题:\",f)}if(0!==u.length)try{await async function(t){try{void 0!==o&&o.info(\"正在检查正则冲突...\",\"处理中\");const r=await e({scope:\"all\"}),i=[],a=[];t.forEach((e=>{r.some((n=>n.id===e.id||n.script_name===e.script_name))?i.push(e.script_name):a.push(e)}));let c=t;if(i.length>0&&!confirm(`检测到 ${i.length} 个冲突项：\\n${i.join(\"\\n\")}\\n\\n是否覆盖现有正则？`)&&(c=a,0===c.length))return void(void 0!==o?o.warning(\"没有新正则需要添加。\",\"已取消\"):alert(\"没有新正则需要添加。\"));void 0!==o&&o.info(`正在导入 ${c.length} 个正则...`,\"处理中\");let l=await e({scope:\"all\"});i.length>0&&(l=l.filter((e=>!c.some((n=>e.id===n.id||e.script_name===n.script_name)))));const p=[...l,...c];await n(p,{scope:\"all\"});const m=`成功导入 ${c.length} 个正则！${i.length>0?`\\n覆盖了 ${i.length} 个冲突项。`:\"\"}`;void 0!==o?o.success(m,\"导入完成\"):alert(m);const u=confirm(\"是否为本次上传的正则添加前缀？\\n（例如：角色名、场景名等标识）\");if(u){const t=prompt(\"请输入要添加的前缀：\\n（将添加到正则名称前面，格式：前缀-原名称）\",\"\");if(t&&t.trim()){const r=t.trim();void 0!==o&&o.info(`正在为 ${c.length} 个正则添加前缀 \"${r}\"...`,\"处理中\");const i=(await e({scope:\"all\"})).map((e=>c.some((n=>e.id===n.id||e.script_name===n.script_name))?{...e,script_name:`${r}-${e.script_name}`}:e));await n(i,{scope:\"all\"}),void 0!==o&&o.success(`前缀 \"${r}\" 添加完成！`,\"处理完成\")}else u&&void 0!==o&&o.warning(\"前缀为空，跳过添加前缀。\",\"已跳过\")}if(confirm(\"是否对所有正则进行重新排序？\\n（新导入的正则将按优先级排序）\")){void 0!==o&&o.info(\"正在重新排序所有正则...\",\"处理中\");const e=p.sort(((e,n)=>{const o=s(e.script_name),t=s(n.script_name);return o!==t?o-t:(e.script_name||\"\").localeCompare(n.script_name||\"\")}));await n(e,{scope:\"all\"}),void 0!==o&&o.success(\"正则排序完成！\",\"处理完成\")}}catch(e){const n=`处理正则时出错: ${e.message}`;console.error(\"processAndMergeRegexes error:\",e),void 0!==o?o.error(n,\"错误\"):alert(n)}}(u)}catch(e){const n=`处理或保存正则时发生严重错误: ${e.message}`;o&&\"function\"==typeof o.error?o.error(n):alert(n),console.error(\"批量上传正则处理/保存错误:\",e)}else{const e=\"没有有效的正则数据可供上传。\";o&&\"function\"==typeof o.info?o.info(e):alert(e)}},document.body.appendChild(t),t.click()}))}catch(e){console.error(\"上传正则扩展: 添加按钮到扩展菜单失败。\",e)}}else console.log(\"上传正则扩展: 按钮已经存在，无需重复添加。\");else console.warn(\"上传正则扩展: 未找到扩展菜单 (#extensionsMenu)。按钮无法添加。\");console.log(\"上传正则扩展: 初始化完成。\")}));",
                            "info": "作者：糕\n功能：\n1.批量/zip压缩包上传正则;\n2.自动选择覆盖重复正则（名称/ID相同）；\n3.可选对所上传或者全局正则进行排序。\n4.支持对上传的正则批量加前缀。",
                            "buttons": [],
                            "data": {},
                            "enabled": true
                        }
                    }
                ],
                "characters_with_scripts": []
            },
            "audio": {
                "audio_enabled": true,
                "bgm_enabled": true,
                "ambient_enabled": true,
                "bgm_mode": "repeat",
                "bgm_muted": false,
                "bgm_volume": 50,
                "bgm_selected": null,
                "bgm_current_time": 0,
                "ambient_mode": "stop",
                "ambient_muted": false,
                "ambient_volume": 50,
                "ambient_selected": null,
                "ambient_current_time": 0,
                "audio_cooldown": 0
            },
            "debug": {
                "enabled": false
            },
            "listener": {
                "enabled": false,
                "enable_echo": true,
                "url": "http://localhost:6621",
                "duration": 1000
            }
        }
    },
    "tags": [
        {
            "id": "1345561466591",
            "name": "ST Default",
            "color": "rgba(108, 32, 32, 1)"
        }
    ],
    "tag_map": {
        "default_Seraphina.png": [
            "1345561466591"
        ],
        "null": []
    },
    "nai_settings": {
        "temperature": 1.5,
        "repetition_penalty": 2.25,
        "repetition_penalty_range": 2048,
        "repetition_penalty_slope": 0.09,
        "repetition_penalty_frequency": 0,
        "repetition_penalty_presence": 0.005,
        "tail_free_sampling": 0.975,
        "top_k": 10,
        "top_p": 0.75,
        "top_a": 0.08,
        "typical_p": 0.975,
        "min_p": 0,
        "math1_temp": 1,
        "math1_quad": 0,
        "math1_quad_entropy_scale": 0,
        "min_length": 1,
        "model_novel": "clio-v1",
        "preset_settings_novel": "Talker-Chat-Clio",
        "streaming_novel": true,
        "preamble": "[ Style: chat, complex, sensory, visceral ]",
        "banned_tokens": "",
        "order": [
            1,
            5,
            0,
            2,
            3,
            4
        ],
        "logit_bias": []
    },
    "kai_settings": {
        "temp": 1,
        "rep_pen": 1.1,
        "rep_pen_range": 600,
        "top_p": 0.95,
        "min_p": 0,
        "top_a": 0,
        "top_k": 0,
        "typical": 1,
        "tfs": 1,
        "rep_pen_slope": 0,
        "streaming_kobold": false,
        "sampler_order": [
            6,
            0,
            1,
            2,
            3,
            4,
            5
        ],
        "mirostat": 0,
        "mirostat_tau": 5,
        "mirostat_eta": 0.1,
        "use_default_badwordsids": false,
        "grammar": "",
        "seed": -1
    },
    "oai_settings": {
        "preset_settings_openai": "Default",
        "temp_openai": 1,
        "freq_pen_openai": 0,
        "pres_pen_openai": 0,
        "top_p_openai": 1,
        "top_k_openai": 0,
        "min_p_openai": 0,
        "top_a_openai": 0,
        "repetition_penalty_openai": 1,
        "stream_openai": true,
        "openai_max_context": 4095,
        "openai_max_tokens": 300,
        "wrap_in_quotes": false,
        "prompts": [
            {
                "name": "Main Prompt",
                "system_prompt": true,
                "role": "system",
                "content": "Write {{char}}'s next reply in a fictional chat between {{char}} and {{user}}.",
                "identifier": "main"
            },
            {
                "name": "Auxiliary Prompt",
                "system_prompt": true,
                "role": "system",
                "content": "",
                "identifier": "nsfw"
            },
            {
                "identifier": "dialogueExamples",
                "name": "Chat Examples",
                "system_prompt": true,
                "marker": true
            },
            {
                "name": "Post-History Instructions",
                "system_prompt": true,
                "role": "system",
                "content": "",
                "identifier": "jailbreak"
            },
            {
                "identifier": "chatHistory",
                "name": "Chat History",
                "system_prompt": true,
                "marker": true
            },
            {
                "identifier": "worldInfoAfter",
                "name": "World Info (after)",
                "system_prompt": true,
                "marker": true
            },
            {
                "identifier": "worldInfoBefore",
                "name": "World Info (before)",
                "system_prompt": true,
                "marker": true
            },
            {
                "identifier": "enhanceDefinitions",
                "role": "system",
                "name": "Enhance Definitions",
                "content": "If you have more knowledge of {{char}}, add to the character's lore and personality to enhance them but keep the Character Sheet's definitions absolute.",
                "system_prompt": true,
                "marker": false
            },
            {
                "identifier": "charDescription",
                "name": "Char Description",
                "system_prompt": true,
                "marker": true
            },
            {
                "identifier": "charPersonality",
                "name": "Char Personality",
                "system_prompt": true,
                "marker": true
            },
            {
                "identifier": "scenario",
                "name": "Scenario",
                "system_prompt": true,
                "marker": true
            },
            {
                "identifier": "personaDescription",
                "name": "Persona Description",
                "system_prompt": true,
                "marker": true
            }
        ],
        "prompt_order": [
            {
                "character_id": 100000,
                "order": [
                    {
                        "identifier": "main",
                        "enabled": true
                    },
                    {
                        "identifier": "worldInfoBefore",
                        "enabled": true
                    },
                    {
                        "identifier": "charDescription",
                        "enabled": true
                    },
                    {
                        "identifier": "charPersonality",
                        "enabled": true
                    },
                    {
                        "identifier": "scenario",
                        "enabled": true
                    },
                    {
                        "identifier": "enhanceDefinitions",
                        "enabled": false
                    },
                    {
                        "identifier": "nsfw",
                        "enabled": true
                    },
                    {
                        "identifier": "worldInfoAfter",
                        "enabled": true
                    },
                    {
                        "identifier": "dialogueExamples",
                        "enabled": true
                    },
                    {
                        "identifier": "chatHistory",
                        "enabled": true
                    },
                    {
                        "identifier": "jailbreak",
                        "enabled": true
                    }
                ]
            },
            {
                "character_id": 100001,
                "order": [
                    {
                        "identifier": "main",
                        "enabled": true
                    },
                    {
                        "identifier": "worldInfoBefore",
                        "enabled": true
                    },
                    {
                        "identifier": "personaDescription",
                        "enabled": true
                    },
                    {
                        "identifier": "charDescription",
                        "enabled": true
                    },
                    {
                        "identifier": "charPersonality",
                        "enabled": true
                    },
                    {
                        "identifier": "scenario",
                        "enabled": true
                    },
                    {
                        "identifier": "enhanceDefinitions",
                        "enabled": false
                    },
                    {
                        "identifier": "nsfw",
                        "enabled": true
                    },
                    {
                        "identifier": "worldInfoAfter",
                        "enabled": true
                    },
                    {
                        "identifier": "dialogueExamples",
                        "enabled": true
                    },
                    {
                        "identifier": "chatHistory",
                        "enabled": true
                    },
                    {
                        "identifier": "jailbreak",
                        "enabled": true
                    }
                ]
            }
        ],
        "send_if_empty": "",
        "impersonation_prompt": "[Write your next reply from the point of view of {{user}}, using the chat history so far as a guideline for the writing style of {{user}}. Write 1 reply only in internet RP style. Don't write as {{char}} or system. Don't describe actions of {{char}}.]",
        "new_chat_prompt": "[Start a new Chat]",
        "new_group_chat_prompt": "[Start a new group chat. Group members: {{group}}]",
        "new_example_chat_prompt": "[Example Chat]",
        "continue_nudge_prompt": "[Continue your last message without repeating its original content.]",
        "bias_preset_selected": "Default (none)",
        "bias_presets": {
            "Default (none)": [],
            "Anti-bond": [
                {
                    "id": "22154f79-dd98-41bc-8e34-87015d6a0eaf",
                    "text": " bond",
                    "value": -50
                },
                {
                    "id": "8ad2d5c4-d8ef-49e4-bc5e-13e7f4690e0f",
                    "text": " future",
                    "value": -50
                },
                {
                    "id": "52a4b280-0956-4940-ac52-4111f83e4046",
                    "text": " bonding",
                    "value": -50
                },
                {
                    "id": "e63037c7-c9d1-4724-ab2d-7756008b433b",
                    "text": " connection",
                    "value": -25
                }
            ]
        },
        "wi_format": "{0}",
        "group_nudge_prompt": "[Write the next reply only as {{char}}.]",
        "scenario_format": "{{scenario}}",
        "personality_format": "{{personality}}",
        "openai_model": "gpt-4-turbo",
        "claude_model": "claude-3-5-sonnet-20240620",
        "google_model": "gemini-1.5-pro",
        "vertexai_model": "gemini-2.0-flash-001",
        "ai21_model": "jamba-1.5-large",
        "mistralai_model": "mistral-large-latest",
        "cohere_model": "command-r-plus",
        "perplexity_model": "sonar-pro",
        "groq_model": "llama-3.3-70b-versatile",
        "nanogpt_model": "gpt-4o-mini",
        "zerooneai_model": "yi-large",
        "deepseek_model": "deepseek-chat",
        "aimlapi_model": "gpt-4o-mini-2024-07-18",
        "xai_model": "grok-3-beta",
        "pollinations_model": "openai",
        "custom_model": "",
        "custom_url": "",
        "custom_include_body": "",
        "custom_exclude_body": "",
        "custom_include_headers": "",
        "windowai_model": "",
        "openrouter_model": "OR_Website",
        "openrouter_use_fallback": false,
        "openrouter_group_models": false,
        "openrouter_sort_models": "alphabetically",
        "openrouter_providers": [],
        "openrouter_allow_fallbacks": true,
        "openrouter_middleout": "on",
        "reverse_proxy": "",
        "chat_completion_source": "openai",
        "max_context_unlocked": false,
        "api_url_scale": "",
        "show_external_models": false,
        "proxy_password": "",
        "assistant_prefill": "",
        "assistant_impersonation": "",
        "claude_use_sysprompt": false,
        "use_makersuite_sysprompt": true,
        "vertexai_auth_mode": "express",
        "vertexai_region": "us-central1",
        "vertexai_express_project_id": "",
        "use_alt_scale": false,
        "squash_system_messages": false,
        "image_inlining": false,
        "inline_image_quality": "low",
        "video_inlining": false,
        "bypass_status_check": false,
        "continue_prefill": false,
        "function_calling": false,
        "names_behavior": 0,
        "continue_postfix": " ",
        "custom_prompt_post_processing": "",
        "show_thoughts": true,
        "reasoning_effort": "auto",
        "enable_web_search": false,
        "request_images": false,
        "seed": -1,
        "n": 1,
        "bind_preset_to_connection": true
    },
    "background": {
        "name": "__transparent.png",
        "url": "url(\"backgrounds/__transparent.png\")",
        "fitting": "classic",
        "animation": false
    },
    "proxies": [
        {
            "name": "None",
            "url": "",
            "password": ""
        }
    ],
    "selected_proxy": {
        "name": "None",
        "url": "",
        "password": ""
    }
}